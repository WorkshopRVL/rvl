/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 29.10.13 09:05
 */
package org.purl.rvl.interpreter.rvl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Invertsourceproperty </li>
 *   <li> Mapmissingvaluesto </li>
 *   <li> Missingsourcevalue </li>
 *   <li> Missingvaluemapping </li>
 *   <li> Objectfilter </li>
 *   <li> Sourceproperty </li>
 *   <li> Sourcevaluesoutofbounds </li>
 *   <li> Sub_graphic </li>
 *   <li> Sub_mapping </li>
 *   <li> Subjectfilter </li>
 *   <li> Targetgraphicrelation_abstract_ </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 29.10.13 09:05
 */
public class PropertyMapping extends Mapping {

    /** http://purl.org/rvl/PropertyMapping */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/rvl/PropertyMapping", false);

    /** http://purl.org/rvl/invertSourceProperty */
    @SuppressWarnings("hiding")
	public static final URI INVERTSOURCEPROPERTY = new URIImpl("http://purl.org/rvl/invertSourceProperty",false);

    /** http://purl.org/rvl/mapMissingValuesTo */
    @SuppressWarnings("hiding")
	public static final URI MAPMISSINGVALUESTO = new URIImpl("http://purl.org/rvl/mapMissingValuesTo",false);

    /** http://purl.org/rvl/missingSourceValue */
    @SuppressWarnings("hiding")
	public static final URI MISSINGSOURCEVALUE = new URIImpl("http://purl.org/rvl/missingSourceValue",false);

    /** http://purl.org/rvl/missingValueMapping */
    @SuppressWarnings("hiding")
	public static final URI MISSINGVALUEMAPPING = new URIImpl("http://purl.org/rvl/missingValueMapping",false);

    /** http://purl.org/rvl/objectFilter */
    @SuppressWarnings("hiding")
	public static final URI OBJECTFILTER = new URIImpl("http://purl.org/rvl/objectFilter",false);

    /** http://purl.org/rvl/sourceProperty */
    @SuppressWarnings("hiding")
	public static final URI SOURCEPROPERTY = new URIImpl("http://purl.org/rvl/sourceProperty",false);

    /** http://purl.org/rvl/sourceValuesOutOfBounds */
    @SuppressWarnings("hiding")
	public static final URI SOURCEVALUESOUTOFBOUNDS = new URIImpl("http://purl.org/rvl/sourceValuesOutOfBounds",false);

    /** http://purl.org/rvl/subGraphic */
    @SuppressWarnings("hiding")
	public static final URI SUB_GRAPHIC = new URIImpl("http://purl.org/rvl/subGraphic",false);

    /** http://purl.org/rvl/subMapping */
    @SuppressWarnings("hiding")
	public static final URI SUB_MAPPING = new URIImpl("http://purl.org/rvl/subMapping",false);

    /** http://purl.org/rvl/subjectFilter */
    @SuppressWarnings("hiding")
	public static final URI SUBJECTFILTER = new URIImpl("http://purl.org/rvl/subjectFilter",false);

    /** http://purl.org/rvl/targetGraphicRelation */
    @SuppressWarnings("hiding")
	public static final URI TARGETGRAPHICRELATION_ABSTRACT_ = new URIImpl("http://purl.org/rvl/targetGraphicRelation",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/rvl/invertSourceProperty",false),
      new URIImpl("http://purl.org/rvl/mapMissingValuesTo",false),
      new URIImpl("http://purl.org/rvl/missingSourceValue",false),
      new URIImpl("http://purl.org/rvl/missingValueMapping",false),
      new URIImpl("http://purl.org/rvl/objectFilter",false),
      new URIImpl("http://purl.org/rvl/sourceProperty",false),
      new URIImpl("http://purl.org/rvl/sourceValuesOutOfBounds",false),
      new URIImpl("http://purl.org/rvl/subGraphic",false),
      new URIImpl("http://purl.org/rvl/subMapping",false),
      new URIImpl("http://purl.org/rvl/subjectFilter",false),
      new URIImpl("http://purl.org/rvl/targetGraphicRelation",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected PropertyMapping ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public PropertyMapping ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public PropertyMapping ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public PropertyMapping ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public PropertyMapping ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of PropertyMapping  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static PropertyMapping  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, PropertyMapping.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/rvl/PropertyMapping).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends PropertyMapping> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, PropertyMapping.class );
	}

    /**
	 * Remove rdf:type PropertyMapping from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e68bc46 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInvertsourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVERTSOURCEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e68bc46 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInvertsourceproperty() {
		return Base.has(this.model, this.getResource(), INVERTSOURCEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e68bc46 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInvertsourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVERTSOURCEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e68bc46 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInvertsourceproperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERTSOURCEPROPERTY);
	}

     /**
     * Get all values of property Invertsourceproperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvertsourceproperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERTSOURCEPROPERTY);
	}
	
    /**
     * Get all values of property Invertsourceproperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvertsourceproperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERTSOURCEPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Invertsourceproperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvertsourceproperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERTSOURCEPROPERTY);
	}

    /**
     * Get all values of property Invertsourceproperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvertsourceproperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERTSOURCEPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Invertsourceproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Boolean> getAllInvertsourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERTSOURCEPROPERTY, java.lang.Boolean.class);
	}
	
    /**
     * Get all values of property Invertsourceproperty as a ReactorResult of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Boolean> getAllInvertsourceproperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERTSOURCEPROPERTY, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Invertsourceproperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Boolean> getAllInvertsourceproperty() {
		return Base.getAll(this.model, this.getResource(), INVERTSOURCEPROPERTY, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Invertsourceproperty as a ReactorResult of java.lang.Boolean 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Boolean> getAllInvertsourceproperty_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERTSOURCEPROPERTY, java.lang.Boolean.class);
	}
 
    /**
     * Adds a value to property Invertsourceproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInvertsourceproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}
	
    /**
     * Adds a value to property Invertsourceproperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInvertsourceproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
    /**
     * Adds a value to property Invertsourceproperty from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInvertsourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}
	
    /**
     * Adds a value to property Invertsourceproperty from an instance of java.lang.Boolean 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInvertsourceproperty(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
  

    /**
     * Sets a value of property Invertsourceproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInvertsourceproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}
	
    /**
     * Sets a value of property Invertsourceproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInvertsourceproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
    /**
     * Sets a value of property Invertsourceproperty from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInvertsourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}
	
    /**
     * Sets a value of property Invertsourceproperty from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInvertsourceproperty(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
  


    /**
     * Removes a value of property Invertsourceproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInvertsourceproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}
	
    /**
     * Removes a value of property Invertsourceproperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInvertsourceproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
    /**
     * Removes a value of property Invertsourceproperty given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInvertsourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, INVERTSOURCEPROPERTY, value);
	}
	
    /**
     * Removes a value of property Invertsourceproperty given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInvertsourceproperty(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), INVERTSOURCEPROPERTY, value);
	}
  
    /**
     * Removes all values of property Invertsourceproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInvertsourceproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERTSOURCEPROPERTY);
	}
	
    /**
     * Removes all values of property Invertsourceproperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInvertsourceproperty() {
		Base.removeAll(this.model, this.getResource(), INVERTSOURCEPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a2c25b4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMapmissingvaluesto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAPMISSINGVALUESTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a2c25b4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMapmissingvaluesto() {
		return Base.has(this.model, this.getResource(), MAPMISSINGVALUESTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a2c25b4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMapmissingvaluesto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAPMISSINGVALUESTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a2c25b4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMapmissingvaluesto( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAPMISSINGVALUESTO);
	}

     /**
     * Get all values of property Mapmissingvaluesto as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMapmissingvaluesto_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAPMISSINGVALUESTO);
	}
	
    /**
     * Get all values of property Mapmissingvaluesto as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMapmissingvaluesto_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAPMISSINGVALUESTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Mapmissingvaluesto as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMapmissingvaluesto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAPMISSINGVALUESTO);
	}

    /**
     * Get all values of property Mapmissingvaluesto as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMapmissingvaluesto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAPMISSINGVALUESTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Mapmissingvaluesto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllMapmissingvaluesto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAPMISSINGVALUESTO, A_0.class);
	}
	
    /**
     * Get all values of property Mapmissingvaluesto as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllMapmissingvaluesto_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAPMISSINGVALUESTO, A_0.class);
	}

    /**
     * Get all values of property Mapmissingvaluesto     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllMapmissingvaluesto() {
		return Base.getAll(this.model, this.getResource(), MAPMISSINGVALUESTO, A_0.class);
	}

    /**
     * Get all values of property Mapmissingvaluesto as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllMapmissingvaluesto_as() {
		return Base.getAll_as(this.model, this.getResource(), MAPMISSINGVALUESTO, A_0.class);
	}
 
    /**
     * Adds a value to property Mapmissingvaluesto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMapmissingvaluesto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAPMISSINGVALUESTO, value);
	}
	
    /**
     * Adds a value to property Mapmissingvaluesto as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMapmissingvaluesto( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
    /**
     * Adds a value to property Mapmissingvaluesto from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMapmissingvaluesto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, MAPMISSINGVALUESTO, value);
	}
	
    /**
     * Adds a value to property Mapmissingvaluesto from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMapmissingvaluesto(A_0 value) {
		Base.add(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
  

    /**
     * Sets a value of property Mapmissingvaluesto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMapmissingvaluesto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAPMISSINGVALUESTO, value);
	}
	
    /**
     * Sets a value of property Mapmissingvaluesto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMapmissingvaluesto( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
    /**
     * Sets a value of property Mapmissingvaluesto from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMapmissingvaluesto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, MAPMISSINGVALUESTO, value);
	}
	
    /**
     * Sets a value of property Mapmissingvaluesto from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMapmissingvaluesto(A_0 value) {
		Base.set(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
  


    /**
     * Removes a value of property Mapmissingvaluesto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMapmissingvaluesto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAPMISSINGVALUESTO, value);
	}
	
    /**
     * Removes a value of property Mapmissingvaluesto as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMapmissingvaluesto( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
    /**
     * Removes a value of property Mapmissingvaluesto given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMapmissingvaluesto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, MAPMISSINGVALUESTO, value);
	}
	
    /**
     * Removes a value of property Mapmissingvaluesto given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMapmissingvaluesto(A_0 value) {
		Base.remove(this.model, this.getResource(), MAPMISSINGVALUESTO, value);
	}
  
    /**
     * Removes all values of property Mapmissingvaluesto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMapmissingvaluesto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAPMISSINGVALUESTO);
	}
	
    /**
     * Removes all values of property Mapmissingvaluesto	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMapmissingvaluesto() {
		Base.removeAll(this.model, this.getResource(), MAPMISSINGVALUESTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e2a235c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMissingsourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MISSINGSOURCEVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e2a235c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMissingsourcevalue() {
		return Base.has(this.model, this.getResource(), MISSINGSOURCEVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e2a235c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMissingsourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MISSINGSOURCEVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e2a235c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMissingsourcevalue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MISSINGSOURCEVALUE);
	}

     /**
     * Get all values of property Missingsourcevalue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMissingsourcevalue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MISSINGSOURCEVALUE);
	}
	
    /**
     * Get all values of property Missingsourcevalue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMissingsourcevalue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MISSINGSOURCEVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Missingsourcevalue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMissingsourcevalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MISSINGSOURCEVALUE);
	}

    /**
     * Get all values of property Missingsourcevalue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMissingsourcevalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MISSINGSOURCEVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Missingsourcevalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Missingsourcevaluehandlingtype> getAllMissingsourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MISSINGSOURCEVALUE, Missingsourcevaluehandlingtype.class);
	}
	
    /**
     * Get all values of property Missingsourcevalue as a ReactorResult of Missingsourcevaluehandlingtype 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Missingsourcevaluehandlingtype> getAllMissingsourcevalue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MISSINGSOURCEVALUE, Missingsourcevaluehandlingtype.class);
	}

    /**
     * Get all values of property Missingsourcevalue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Missingsourcevaluehandlingtype> getAllMissingsourcevalue() {
		return Base.getAll(this.model, this.getResource(), MISSINGSOURCEVALUE, Missingsourcevaluehandlingtype.class);
	}

    /**
     * Get all values of property Missingsourcevalue as a ReactorResult of Missingsourcevaluehandlingtype 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Missingsourcevaluehandlingtype> getAllMissingsourcevalue_as() {
		return Base.getAll_as(this.model, this.getResource(), MISSINGSOURCEVALUE, Missingsourcevaluehandlingtype.class);
	}
 
    /**
     * Adds a value to property Missingsourcevalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMissingsourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MISSINGSOURCEVALUE, value);
	}
	
    /**
     * Adds a value to property Missingsourcevalue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMissingsourcevalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
    /**
     * Adds a value to property Missingsourcevalue from an instance of Missingsourcevaluehandlingtype 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMissingsourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Missingsourcevaluehandlingtype value) {
		Base.add(model, instanceResource, MISSINGSOURCEVALUE, value);
	}
	
    /**
     * Adds a value to property Missingsourcevalue from an instance of Missingsourcevaluehandlingtype 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMissingsourcevalue(Missingsourcevaluehandlingtype value) {
		Base.add(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
  

    /**
     * Sets a value of property Missingsourcevalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMissingsourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MISSINGSOURCEVALUE, value);
	}
	
    /**
     * Sets a value of property Missingsourcevalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMissingsourcevalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
    /**
     * Sets a value of property Missingsourcevalue from an instance of Missingsourcevaluehandlingtype 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMissingsourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Missingsourcevaluehandlingtype value) {
		Base.set(model, instanceResource, MISSINGSOURCEVALUE, value);
	}
	
    /**
     * Sets a value of property Missingsourcevalue from an instance of Missingsourcevaluehandlingtype 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMissingsourcevalue(Missingsourcevaluehandlingtype value) {
		Base.set(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
  


    /**
     * Removes a value of property Missingsourcevalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMissingsourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MISSINGSOURCEVALUE, value);
	}
	
    /**
     * Removes a value of property Missingsourcevalue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMissingsourcevalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
    /**
     * Removes a value of property Missingsourcevalue given as an instance of Missingsourcevaluehandlingtype 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMissingsourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Missingsourcevaluehandlingtype value) {
		Base.remove(model, instanceResource, MISSINGSOURCEVALUE, value);
	}
	
    /**
     * Removes a value of property Missingsourcevalue given as an instance of Missingsourcevaluehandlingtype 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMissingsourcevalue(Missingsourcevaluehandlingtype value) {
		Base.remove(this.model, this.getResource(), MISSINGSOURCEVALUE, value);
	}
  
    /**
     * Removes all values of property Missingsourcevalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMissingsourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MISSINGSOURCEVALUE);
	}
	
    /**
     * Removes all values of property Missingsourcevalue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMissingsourcevalue() {
		Base.removeAll(this.model, this.getResource(), MISSINGSOURCEVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@329d9416 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMissingvaluemapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MISSINGVALUEMAPPING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@329d9416 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMissingvaluemapping() {
		return Base.has(this.model, this.getResource(), MISSINGVALUEMAPPING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@329d9416 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMissingvaluemapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MISSINGVALUEMAPPING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@329d9416 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMissingvaluemapping( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MISSINGVALUEMAPPING);
	}

     /**
     * Get all values of property Missingvaluemapping as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMissingvaluemapping_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MISSINGVALUEMAPPING);
	}
	
    /**
     * Get all values of property Missingvaluemapping as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMissingvaluemapping_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MISSINGVALUEMAPPING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Missingvaluemapping as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMissingvaluemapping_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MISSINGVALUEMAPPING);
	}

    /**
     * Get all values of property Missingvaluemapping as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMissingvaluemapping_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MISSINGVALUEMAPPING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Missingvaluemapping     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Missingvaluemappinghandlingtype> getAllMissingvaluemapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MISSINGVALUEMAPPING, Missingvaluemappinghandlingtype.class);
	}
	
    /**
     * Get all values of property Missingvaluemapping as a ReactorResult of Missingvaluemappinghandlingtype 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Missingvaluemappinghandlingtype> getAllMissingvaluemapping_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MISSINGVALUEMAPPING, Missingvaluemappinghandlingtype.class);
	}

    /**
     * Get all values of property Missingvaluemapping     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Missingvaluemappinghandlingtype> getAllMissingvaluemapping() {
		return Base.getAll(this.model, this.getResource(), MISSINGVALUEMAPPING, Missingvaluemappinghandlingtype.class);
	}

    /**
     * Get all values of property Missingvaluemapping as a ReactorResult of Missingvaluemappinghandlingtype 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Missingvaluemappinghandlingtype> getAllMissingvaluemapping_as() {
		return Base.getAll_as(this.model, this.getResource(), MISSINGVALUEMAPPING, Missingvaluemappinghandlingtype.class);
	}
 
    /**
     * Adds a value to property Missingvaluemapping as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMissingvaluemapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MISSINGVALUEMAPPING, value);
	}
	
    /**
     * Adds a value to property Missingvaluemapping as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMissingvaluemapping( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
    /**
     * Adds a value to property Missingvaluemapping from an instance of Missingvaluemappinghandlingtype 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMissingvaluemapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Missingvaluemappinghandlingtype value) {
		Base.add(model, instanceResource, MISSINGVALUEMAPPING, value);
	}
	
    /**
     * Adds a value to property Missingvaluemapping from an instance of Missingvaluemappinghandlingtype 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMissingvaluemapping(Missingvaluemappinghandlingtype value) {
		Base.add(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
  

    /**
     * Sets a value of property Missingvaluemapping from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMissingvaluemapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MISSINGVALUEMAPPING, value);
	}
	
    /**
     * Sets a value of property Missingvaluemapping from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMissingvaluemapping( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
    /**
     * Sets a value of property Missingvaluemapping from an instance of Missingvaluemappinghandlingtype 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMissingvaluemapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Missingvaluemappinghandlingtype value) {
		Base.set(model, instanceResource, MISSINGVALUEMAPPING, value);
	}
	
    /**
     * Sets a value of property Missingvaluemapping from an instance of Missingvaluemappinghandlingtype 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMissingvaluemapping(Missingvaluemappinghandlingtype value) {
		Base.set(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
  


    /**
     * Removes a value of property Missingvaluemapping as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMissingvaluemapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MISSINGVALUEMAPPING, value);
	}
	
    /**
     * Removes a value of property Missingvaluemapping as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMissingvaluemapping( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
    /**
     * Removes a value of property Missingvaluemapping given as an instance of Missingvaluemappinghandlingtype 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMissingvaluemapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Missingvaluemappinghandlingtype value) {
		Base.remove(model, instanceResource, MISSINGVALUEMAPPING, value);
	}
	
    /**
     * Removes a value of property Missingvaluemapping given as an instance of Missingvaluemappinghandlingtype 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMissingvaluemapping(Missingvaluemappinghandlingtype value) {
		Base.remove(this.model, this.getResource(), MISSINGVALUEMAPPING, value);
	}
  
    /**
     * Removes all values of property Missingvaluemapping     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMissingvaluemapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MISSINGVALUEMAPPING);
	}
	
    /**
     * Removes all values of property Missingvaluemapping	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMissingvaluemapping() {
		Base.removeAll(this.model, this.getResource(), MISSINGVALUEMAPPING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3918e589 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasObjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OBJECTFILTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3918e589 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasObjectfilter() {
		return Base.has(this.model, this.getResource(), OBJECTFILTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3918e589 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasObjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OBJECTFILTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3918e589 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasObjectfilter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OBJECTFILTER);
	}

     /**
     * Get all values of property Objectfilter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllObjectfilter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OBJECTFILTER);
	}
	
    /**
     * Get all values of property Objectfilter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllObjectfilter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OBJECTFILTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Objectfilter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllObjectfilter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OBJECTFILTER);
	}

    /**
     * Get all values of property Objectfilter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllObjectfilter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OBJECTFILTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Objectfilter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllObjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OBJECTFILTER, A_0.class);
	}
	
    /**
     * Get all values of property Objectfilter as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllObjectfilter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OBJECTFILTER, A_0.class);
	}

    /**
     * Get all values of property Objectfilter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllObjectfilter() {
		return Base.getAll(this.model, this.getResource(), OBJECTFILTER, A_0.class);
	}

    /**
     * Get all values of property Objectfilter as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllObjectfilter_as() {
		return Base.getAll_as(this.model, this.getResource(), OBJECTFILTER, A_0.class);
	}
 
    /**
     * Adds a value to property Objectfilter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addObjectfilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OBJECTFILTER, value);
	}
	
    /**
     * Adds a value to property Objectfilter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addObjectfilter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OBJECTFILTER, value);
	}
    /**
     * Adds a value to property Objectfilter from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addObjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, OBJECTFILTER, value);
	}
	
    /**
     * Adds a value to property Objectfilter from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addObjectfilter(A_0 value) {
		Base.add(this.model, this.getResource(), OBJECTFILTER, value);
	}
  

    /**
     * Sets a value of property Objectfilter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setObjectfilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OBJECTFILTER, value);
	}
	
    /**
     * Sets a value of property Objectfilter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setObjectfilter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OBJECTFILTER, value);
	}
    /**
     * Sets a value of property Objectfilter from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setObjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, OBJECTFILTER, value);
	}
	
    /**
     * Sets a value of property Objectfilter from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setObjectfilter(A_0 value) {
		Base.set(this.model, this.getResource(), OBJECTFILTER, value);
	}
  


    /**
     * Removes a value of property Objectfilter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeObjectfilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OBJECTFILTER, value);
	}
	
    /**
     * Removes a value of property Objectfilter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeObjectfilter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OBJECTFILTER, value);
	}
    /**
     * Removes a value of property Objectfilter given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeObjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, OBJECTFILTER, value);
	}
	
    /**
     * Removes a value of property Objectfilter given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeObjectfilter(A_0 value) {
		Base.remove(this.model, this.getResource(), OBJECTFILTER, value);
	}
  
    /**
     * Removes all values of property Objectfilter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllObjectfilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OBJECTFILTER);
	}
	
    /**
     * Removes all values of property Objectfilter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllObjectfilter() {
		Base.removeAll(this.model, this.getResource(), OBJECTFILTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c13033a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c13033a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSourceproperty() {
		return Base.has(this.model, this.getResource(), SOURCEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c13033a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c13033a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSourceproperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEPROPERTY);
	}

     /**
     * Get all values of property Sourceproperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourceproperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEPROPERTY);
	}
	
    /**
     * Get all values of property Sourceproperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourceproperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sourceproperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourceproperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEPROPERTY);
	}

    /**
     * Get all values of property Sourceproperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourceproperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sourceproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllSourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
	
    /**
     * Get all values of property Sourceproperty as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllSourceproperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Sourceproperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllSourceproperty() {
		return Base.getAll(this.model, this.getResource(), SOURCEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Sourceproperty as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllSourceproperty_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
 
    /**
     * Adds a value to property Sourceproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSourceproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCEPROPERTY, value);
	}
	
    /**
     * Adds a value to property Sourceproperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSourceproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
    /**
     * Adds a value to property Sourceproperty from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, SOURCEPROPERTY, value);
	}
	
    /**
     * Adds a value to property Sourceproperty from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSourceproperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
  

    /**
     * Sets a value of property Sourceproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSourceproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCEPROPERTY, value);
	}
	
    /**
     * Sets a value of property Sourceproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSourceproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
    /**
     * Sets a value of property Sourceproperty from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, SOURCEPROPERTY, value);
	}
	
    /**
     * Sets a value of property Sourceproperty from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSourceproperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
  


    /**
     * Removes a value of property Sourceproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSourceproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCEPROPERTY, value);
	}
	
    /**
     * Removes a value of property Sourceproperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSourceproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
    /**
     * Removes a value of property Sourceproperty given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSourceproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, SOURCEPROPERTY, value);
	}
	
    /**
     * Removes a value of property Sourceproperty given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSourceproperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), SOURCEPROPERTY, value);
	}
  
    /**
     * Removes all values of property Sourceproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSourceproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEPROPERTY);
	}
	
    /**
     * Removes all values of property Sourceproperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSourceproperty() {
		Base.removeAll(this.model, this.getResource(), SOURCEPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fee77ef has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSourcevaluesoutofbounds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUESOUTOFBOUNDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fee77ef has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSourcevaluesoutofbounds() {
		return Base.has(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fee77ef has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSourcevaluesoutofbounds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUESOUTOFBOUNDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fee77ef has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSourcevaluesoutofbounds( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS);
	}

     /**
     * Get all values of property Sourcevaluesoutofbounds as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevaluesoutofbounds_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUESOUTOFBOUNDS);
	}
	
    /**
     * Get all values of property Sourcevaluesoutofbounds as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevaluesoutofbounds_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sourcevaluesoutofbounds as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevaluesoutofbounds_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS);
	}

    /**
     * Get all values of property Sourcevaluesoutofbounds as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevaluesoutofbounds_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sourcevaluesoutofbounds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSourcevaluesoutofbounds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, Thing.class);
	}
	
    /**
     * Get all values of property Sourcevaluesoutofbounds as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSourcevaluesoutofbounds_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, Thing.class);
	}

    /**
     * Get all values of property Sourcevaluesoutofbounds     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSourcevaluesoutofbounds() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, Thing.class);
	}

    /**
     * Get all values of property Sourcevaluesoutofbounds as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSourcevaluesoutofbounds_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, Thing.class);
	}
 
    /**
     * Adds a value to property Sourcevaluesoutofbounds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSourcevaluesoutofbounds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}
	
    /**
     * Adds a value to property Sourcevaluesoutofbounds as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSourcevaluesoutofbounds( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
    /**
     * Adds a value to property Sourcevaluesoutofbounds from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSourcevaluesoutofbounds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}
	
    /**
     * Adds a value to property Sourcevaluesoutofbounds from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSourcevaluesoutofbounds(Thing value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
  

    /**
     * Sets a value of property Sourcevaluesoutofbounds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSourcevaluesoutofbounds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}
	
    /**
     * Sets a value of property Sourcevaluesoutofbounds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSourcevaluesoutofbounds( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
    /**
     * Sets a value of property Sourcevaluesoutofbounds from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSourcevaluesoutofbounds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}
	
    /**
     * Sets a value of property Sourcevaluesoutofbounds from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSourcevaluesoutofbounds(Thing value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
  


    /**
     * Removes a value of property Sourcevaluesoutofbounds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSourcevaluesoutofbounds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}
	
    /**
     * Removes a value of property Sourcevaluesoutofbounds as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSourcevaluesoutofbounds( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
    /**
     * Removes a value of property Sourcevaluesoutofbounds given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSourcevaluesoutofbounds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SOURCEVALUESOUTOFBOUNDS, value);
	}
	
    /**
     * Removes a value of property Sourcevaluesoutofbounds given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSourcevaluesoutofbounds(Thing value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS, value);
	}
  
    /**
     * Removes all values of property Sourcevaluesoutofbounds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSourcevaluesoutofbounds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUESOUTOFBOUNDS);
	}
	
    /**
     * Removes all values of property Sourcevaluesoutofbounds	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSourcevaluesoutofbounds() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUESOUTOFBOUNDS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bccb4e6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSub_graphic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUB_GRAPHIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bccb4e6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSub_graphic() {
		return Base.has(this.model, this.getResource(), SUB_GRAPHIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bccb4e6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSub_graphic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUB_GRAPHIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bccb4e6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSub_graphic( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUB_GRAPHIC);
	}

     /**
     * Get all values of property Sub_graphic as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSub_graphic_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUB_GRAPHIC);
	}
	
    /**
     * Get all values of property Sub_graphic as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSub_graphic_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUB_GRAPHIC, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sub_graphic as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSub_graphic_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUB_GRAPHIC);
	}

    /**
     * Get all values of property Sub_graphic as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSub_graphic_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUB_GRAPHIC, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sub_graphic     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSub_graphic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUB_GRAPHIC, Thing.class);
	}
	
    /**
     * Get all values of property Sub_graphic as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSub_graphic_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUB_GRAPHIC, Thing.class);
	}

    /**
     * Get all values of property Sub_graphic     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSub_graphic() {
		return Base.getAll(this.model, this.getResource(), SUB_GRAPHIC, Thing.class);
	}

    /**
     * Get all values of property Sub_graphic as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSub_graphic_as() {
		return Base.getAll_as(this.model, this.getResource(), SUB_GRAPHIC, Thing.class);
	}
 
    /**
     * Adds a value to property Sub_graphic as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSub_graphic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUB_GRAPHIC, value);
	}
	
    /**
     * Adds a value to property Sub_graphic as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSub_graphic( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
    /**
     * Adds a value to property Sub_graphic from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSub_graphic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SUB_GRAPHIC, value);
	}
	
    /**
     * Adds a value to property Sub_graphic from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSub_graphic(Thing value) {
		Base.add(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
  

    /**
     * Sets a value of property Sub_graphic from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSub_graphic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUB_GRAPHIC, value);
	}
	
    /**
     * Sets a value of property Sub_graphic from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSub_graphic( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
    /**
     * Sets a value of property Sub_graphic from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSub_graphic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SUB_GRAPHIC, value);
	}
	
    /**
     * Sets a value of property Sub_graphic from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSub_graphic(Thing value) {
		Base.set(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
  


    /**
     * Removes a value of property Sub_graphic as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSub_graphic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUB_GRAPHIC, value);
	}
	
    /**
     * Removes a value of property Sub_graphic as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSub_graphic( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
    /**
     * Removes a value of property Sub_graphic given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSub_graphic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SUB_GRAPHIC, value);
	}
	
    /**
     * Removes a value of property Sub_graphic given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSub_graphic(Thing value) {
		Base.remove(this.model, this.getResource(), SUB_GRAPHIC, value);
	}
  
    /**
     * Removes all values of property Sub_graphic     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSub_graphic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUB_GRAPHIC);
	}
	
    /**
     * Removes all values of property Sub_graphic	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSub_graphic() {
		Base.removeAll(this.model, this.getResource(), SUB_GRAPHIC);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1969a85c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSub_mapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUB_MAPPING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1969a85c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSub_mapping() {
		return Base.has(this.model, this.getResource(), SUB_MAPPING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1969a85c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSub_mapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUB_MAPPING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1969a85c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSub_mapping( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUB_MAPPING);
	}

     /**
     * Get all values of property Sub_mapping as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSub_mapping_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUB_MAPPING);
	}
	
    /**
     * Get all values of property Sub_mapping as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSub_mapping_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUB_MAPPING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sub_mapping as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSub_mapping_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUB_MAPPING);
	}

    /**
     * Get all values of property Sub_mapping as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSub_mapping_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUB_MAPPING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sub_mapping     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Sub_mappingrelation> getAllSub_mapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUB_MAPPING, Sub_mappingrelation.class);
	}
	
    /**
     * Get all values of property Sub_mapping as a ReactorResult of Sub_mappingrelation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Sub_mappingrelation> getAllSub_mapping_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUB_MAPPING, Sub_mappingrelation.class);
	}

    /**
     * Get all values of property Sub_mapping     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Sub_mappingrelation> getAllSub_mapping() {
		return Base.getAll(this.model, this.getResource(), SUB_MAPPING, Sub_mappingrelation.class);
	}

    /**
     * Get all values of property Sub_mapping as a ReactorResult of Sub_mappingrelation 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Sub_mappingrelation> getAllSub_mapping_as() {
		return Base.getAll_as(this.model, this.getResource(), SUB_MAPPING, Sub_mappingrelation.class);
	}
 
    /**
     * Adds a value to property Sub_mapping as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSub_mapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUB_MAPPING, value);
	}
	
    /**
     * Adds a value to property Sub_mapping as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSub_mapping( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUB_MAPPING, value);
	}
    /**
     * Adds a value to property Sub_mapping from an instance of Sub_mappingrelation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSub_mapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Sub_mappingrelation value) {
		Base.add(model, instanceResource, SUB_MAPPING, value);
	}
	
    /**
     * Adds a value to property Sub_mapping from an instance of Sub_mappingrelation 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSub_mapping(Sub_mappingrelation value) {
		Base.add(this.model, this.getResource(), SUB_MAPPING, value);
	}
  

    /**
     * Sets a value of property Sub_mapping from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSub_mapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUB_MAPPING, value);
	}
	
    /**
     * Sets a value of property Sub_mapping from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSub_mapping( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUB_MAPPING, value);
	}
    /**
     * Sets a value of property Sub_mapping from an instance of Sub_mappingrelation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSub_mapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Sub_mappingrelation value) {
		Base.set(model, instanceResource, SUB_MAPPING, value);
	}
	
    /**
     * Sets a value of property Sub_mapping from an instance of Sub_mappingrelation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSub_mapping(Sub_mappingrelation value) {
		Base.set(this.model, this.getResource(), SUB_MAPPING, value);
	}
  


    /**
     * Removes a value of property Sub_mapping as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSub_mapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUB_MAPPING, value);
	}
	
    /**
     * Removes a value of property Sub_mapping as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSub_mapping( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUB_MAPPING, value);
	}
    /**
     * Removes a value of property Sub_mapping given as an instance of Sub_mappingrelation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSub_mapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Sub_mappingrelation value) {
		Base.remove(model, instanceResource, SUB_MAPPING, value);
	}
	
    /**
     * Removes a value of property Sub_mapping given as an instance of Sub_mappingrelation 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSub_mapping(Sub_mappingrelation value) {
		Base.remove(this.model, this.getResource(), SUB_MAPPING, value);
	}
  
    /**
     * Removes all values of property Sub_mapping     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSub_mapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUB_MAPPING);
	}
	
    /**
     * Removes all values of property Sub_mapping	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSub_mapping() {
		Base.removeAll(this.model, this.getResource(), SUB_MAPPING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@457ab7ae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBJECTFILTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@457ab7ae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubjectfilter() {
		return Base.has(this.model, this.getResource(), SUBJECTFILTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@457ab7ae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBJECTFILTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@457ab7ae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubjectfilter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBJECTFILTER);
	}

     /**
     * Get all values of property Subjectfilter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectfilter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBJECTFILTER);
	}
	
    /**
     * Get all values of property Subjectfilter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectfilter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTFILTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Subjectfilter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectfilter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBJECTFILTER);
	}

    /**
     * Get all values of property Subjectfilter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectfilter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTFILTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Subjectfilter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllSubjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBJECTFILTER, A_0.class);
	}
	
    /**
     * Get all values of property Subjectfilter as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllSubjectfilter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTFILTER, A_0.class);
	}

    /**
     * Get all values of property Subjectfilter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllSubjectfilter() {
		return Base.getAll(this.model, this.getResource(), SUBJECTFILTER, A_0.class);
	}

    /**
     * Get all values of property Subjectfilter as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllSubjectfilter_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTFILTER, A_0.class);
	}
 
    /**
     * Adds a value to property Subjectfilter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubjectfilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBJECTFILTER, value);
	}
	
    /**
     * Adds a value to property Subjectfilter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubjectfilter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBJECTFILTER, value);
	}
    /**
     * Adds a value to property Subjectfilter from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, SUBJECTFILTER, value);
	}
	
    /**
     * Adds a value to property Subjectfilter from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubjectfilter(A_0 value) {
		Base.add(this.model, this.getResource(), SUBJECTFILTER, value);
	}
  

    /**
     * Sets a value of property Subjectfilter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubjectfilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBJECTFILTER, value);
	}
	
    /**
     * Sets a value of property Subjectfilter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubjectfilter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBJECTFILTER, value);
	}
    /**
     * Sets a value of property Subjectfilter from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, SUBJECTFILTER, value);
	}
	
    /**
     * Sets a value of property Subjectfilter from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubjectfilter(A_0 value) {
		Base.set(this.model, this.getResource(), SUBJECTFILTER, value);
	}
  


    /**
     * Removes a value of property Subjectfilter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubjectfilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBJECTFILTER, value);
	}
	
    /**
     * Removes a value of property Subjectfilter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubjectfilter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBJECTFILTER, value);
	}
    /**
     * Removes a value of property Subjectfilter given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubjectfilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, SUBJECTFILTER, value);
	}
	
    /**
     * Removes a value of property Subjectfilter given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubjectfilter(A_0 value) {
		Base.remove(this.model, this.getResource(), SUBJECTFILTER, value);
	}
  
    /**
     * Removes all values of property Subjectfilter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubjectfilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBJECTFILTER);
	}
	
    /**
     * Removes all values of property Subjectfilter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubjectfilter() {
		Base.removeAll(this.model, this.getResource(), SUBJECTFILTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48832834 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetgraphicrelation_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48832834 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetgraphicrelation_abstract_() {
		return Base.has(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48832834 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetgraphicrelation_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48832834 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetgraphicrelation_abstract_( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_);
	}

     /**
     * Get all values of property Targetgraphicrelation_abstract_ as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetgraphicrelation_abstract__asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_);
	}
	
    /**
     * Get all values of property Targetgraphicrelation_abstract_ as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetgraphicrelation_abstract__asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Targetgraphicrelation_abstract_ as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetgraphicrelation_abstract__asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_);
	}

    /**
     * Get all values of property Targetgraphicrelation_abstract_ as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetgraphicrelation_abstract__asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Targetgraphicrelation_abstract_     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllTargetgraphicrelation_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}
	
    /**
     * Get all values of property Targetgraphicrelation_abstract_ as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Class> getAllTargetgraphicrelation_abstract__as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}

    /**
     * Get all values of property Targetgraphicrelation_abstract_     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllTargetgraphicrelation_abstract_() {
		return Base.getAll(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}

    /**
     * Get all values of property Targetgraphicrelation_abstract_ as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Class> getAllTargetgraphicrelation_abstract__as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}
 
    /**
     * Adds a value to property Targetgraphicrelation_abstract_ as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTargetgraphicrelation_abstract_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
	
    /**
     * Adds a value to property Targetgraphicrelation_abstract_ as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTargetgraphicrelation_abstract_( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
    /**
     * Adds a value to property Targetgraphicrelation_abstract_ from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTargetgraphicrelation_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.add(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
	
    /**
     * Adds a value to property Targetgraphicrelation_abstract_ from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTargetgraphicrelation_abstract_(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.add(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
  

    /**
     * Sets a value of property Targetgraphicrelation_abstract_ from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetgraphicrelation_abstract_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
	
    /**
     * Sets a value of property Targetgraphicrelation_abstract_ from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetgraphicrelation_abstract_( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
    /**
     * Sets a value of property Targetgraphicrelation_abstract_ from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetgraphicrelation_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.set(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
	
    /**
     * Sets a value of property Targetgraphicrelation_abstract_ from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetgraphicrelation_abstract_(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.set(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
  


    /**
     * Removes a value of property Targetgraphicrelation_abstract_ as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetgraphicrelation_abstract_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
	
    /**
     * Removes a value of property Targetgraphicrelation_abstract_ as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetgraphicrelation_abstract_( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
    /**
     * Removes a value of property Targetgraphicrelation_abstract_ given as an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetgraphicrelation_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.remove(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
	
    /**
     * Removes a value of property Targetgraphicrelation_abstract_ given as an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetgraphicrelation_abstract_(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.remove(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_, value);
	}
  
    /**
     * Removes all values of property Targetgraphicrelation_abstract_     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetgraphicrelation_abstract_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETGRAPHICRELATION_ABSTRACT_);
	}
	
    /**
     * Removes all values of property Targetgraphicrelation_abstract_	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetgraphicrelation_abstract_() {
		Base.removeAll(this.model, this.getResource(), TARGETGRAPHICRELATION_ABSTRACT_);
	}
 }