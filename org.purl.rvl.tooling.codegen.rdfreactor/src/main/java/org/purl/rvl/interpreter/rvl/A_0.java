/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 29.10.13 09:05
 */
package org.purl.rvl.interpreter.rvl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Excludesourcevalue </li>
 *   <li> Inheritedby </li>
 *   <li> Passedto </li>
 *   <li> Sourcevalue </li>
 *   <li> Sourcevalueset </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 29.10.13 09:05
 */
public class A_0 extends Thing {

    /** blank://0 */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("blank://0", false);

    /** http://purl.org/rvl/excludeSourceValue */
    @SuppressWarnings("hiding")
	public static final URI EXCLUDESOURCEVALUE = new URIImpl("http://purl.org/rvl/excludeSourceValue",false);

    /** http://purl.org/rvl/inheritedBy */
    @SuppressWarnings("hiding")
	public static final URI INHERITEDBY = new URIImpl("http://purl.org/rvl/inheritedBy",false);

    /** http://purl.org/rvl/passedTo */
    @SuppressWarnings("hiding")
	public static final URI PASSEDTO = new URIImpl("http://purl.org/rvl/passedTo",false);

    /** http://purl.org/rvl/sourceValue */
    @SuppressWarnings("hiding")
	public static final URI SOURCEVALUE = new URIImpl("http://purl.org/rvl/sourceValue",false);

    /** http://purl.org/rvl/sourceValueSet */
    @SuppressWarnings("hiding")
	public static final URI SOURCEVALUESET = new URIImpl("http://purl.org/rvl/sourceValueSet",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/rvl/excludeSourceValue",false),
      new URIImpl("http://purl.org/rvl/inheritedBy",false),
      new URIImpl("http://purl.org/rvl/passedTo",false),
      new URIImpl("http://purl.org/rvl/sourceValue",false),
      new URIImpl("http://purl.org/rvl/sourceValueSet",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected A_0 ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public A_0 ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public A_0 ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public A_0 ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public A_0 ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of A_0  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static A_0  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, A_0.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, blank://0).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends A_0> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, A_0.class );
	}

    /**
	 * Remove rdf:type A_0 from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Targetvalue' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvalue_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TARGETVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Targetvalue' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvalue_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TARGETVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Targetvalue' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTargetvalue_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TARGETVALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Ontriplepart' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOntriplepart_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Sub_mappingrelation.ONTRIPLEPART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Ontriplepart' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOntriplepart_Inverse() {
		return Base.getAll_Inverse(this.model, Sub_mappingrelation.ONTRIPLEPART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Ontriplepart' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOntriplepart_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Sub_mappingrelation.ONTRIPLEPART, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Mapmissingvaluesto' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMapmissingvaluesto_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, PropertyMapping.MAPMISSINGVALUESTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Mapmissingvaluesto' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMapmissingvaluesto_Inverse() {
		return Base.getAll_Inverse(this.model, PropertyMapping.MAPMISSINGVALUESTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Mapmissingvaluesto' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMapmissingvaluesto_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, PropertyMapping.MAPMISSINGVALUESTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Objectfilter' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllObjectfilter_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, PropertyMapping.OBJECTFILTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Objectfilter' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllObjectfilter_Inverse() {
		return Base.getAll_Inverse(this.model, PropertyMapping.OBJECTFILTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Objectfilter' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllObjectfilter_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, PropertyMapping.OBJECTFILTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Subjectfilter' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubjectfilter_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, PropertyMapping.SUBJECTFILTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Subjectfilter' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubjectfilter_Inverse() {
		return Base.getAll_Inverse(this.model, PropertyMapping.SUBJECTFILTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Subjectfilter' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSubjectfilter_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, PropertyMapping.SUBJECTFILTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sourcefilter' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourcefilter_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Valuemapping.SOURCEFILTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sourcefilter' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourcefilter_Inverse() {
		return Base.getAll_Inverse(this.model, Valuemapping.SOURCEFILTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sourcefilter' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSourcefilter_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Valuemapping.SOURCEFILTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sourcevalue' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourcevalue_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, A_0.SOURCEVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sourcevalue' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourcevalue_Inverse() {
		return Base.getAll_Inverse(this.model, A_0.SOURCEVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sourcevalue' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSourcevalue_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, A_0.SOURCEVALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sourcevalueset' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourcevalueset_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, A_0.SOURCEVALUESET, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sourcevalueset' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourcevalueset_Inverse() {
		return Base.getAll_Inverse(this.model, A_0.SOURCEVALUESET, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sourcevalueset' to this A_0 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSourcevalueset_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, A_0.SOURCEVALUESET, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34704d9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExcludesourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXCLUDESOURCEVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34704d9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExcludesourcevalue() {
		return Base.has(this.model, this.getResource(), EXCLUDESOURCEVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34704d9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExcludesourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXCLUDESOURCEVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34704d9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExcludesourcevalue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXCLUDESOURCEVALUE);
	}

     /**
     * Get all values of property Excludesourcevalue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExcludesourcevalue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXCLUDESOURCEVALUE);
	}
	
    /**
     * Get all values of property Excludesourcevalue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExcludesourcevalue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXCLUDESOURCEVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Excludesourcevalue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExcludesourcevalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXCLUDESOURCEVALUE);
	}

    /**
     * Get all values of property Excludesourcevalue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExcludesourcevalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXCLUDESOURCEVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Excludesourcevalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllExcludesourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXCLUDESOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property Excludesourcevalue as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllExcludesourcevalue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXCLUDESOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Excludesourcevalue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllExcludesourcevalue() {
		return Base.getAll(this.model, this.getResource(), EXCLUDESOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Excludesourcevalue as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllExcludesourcevalue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXCLUDESOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property Excludesourcevalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExcludesourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}
	
    /**
     * Adds a value to property Excludesourcevalue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExcludesourcevalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
    /**
     * Adds a value to property Excludesourcevalue from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExcludesourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}
	
    /**
     * Adds a value to property Excludesourcevalue from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExcludesourcevalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
  

    /**
     * Sets a value of property Excludesourcevalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExcludesourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}
	
    /**
     * Sets a value of property Excludesourcevalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExcludesourcevalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
    /**
     * Sets a value of property Excludesourcevalue from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExcludesourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}
	
    /**
     * Sets a value of property Excludesourcevalue from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExcludesourcevalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
  


    /**
     * Removes a value of property Excludesourcevalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExcludesourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}
	
    /**
     * Removes a value of property Excludesourcevalue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExcludesourcevalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
    /**
     * Removes a value of property Excludesourcevalue given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExcludesourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, EXCLUDESOURCEVALUE, value);
	}
	
    /**
     * Removes a value of property Excludesourcevalue given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExcludesourcevalue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), EXCLUDESOURCEVALUE, value);
	}
  
    /**
     * Removes all values of property Excludesourcevalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExcludesourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXCLUDESOURCEVALUE);
	}
	
    /**
     * Removes all values of property Excludesourcevalue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExcludesourcevalue() {
		Base.removeAll(this.model, this.getResource(), EXCLUDESOURCEVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@692769e1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInheritedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INHERITEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@692769e1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInheritedby() {
		return Base.has(this.model, this.getResource(), INHERITEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@692769e1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInheritedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INHERITEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@692769e1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInheritedby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INHERITEDBY);
	}

     /**
     * Get all values of property Inheritedby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInheritedby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INHERITEDBY);
	}
	
    /**
     * Get all values of property Inheritedby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInheritedby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INHERITEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Inheritedby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInheritedby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INHERITEDBY);
	}

    /**
     * Get all values of property Inheritedby as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInheritedby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INHERITEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Inheritedby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInheritedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INHERITEDBY, Thing.class);
	}
	
    /**
     * Get all values of property Inheritedby as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInheritedby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INHERITEDBY, Thing.class);
	}

    /**
     * Get all values of property Inheritedby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInheritedby() {
		return Base.getAll(this.model, this.getResource(), INHERITEDBY, Thing.class);
	}

    /**
     * Get all values of property Inheritedby as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInheritedby_as() {
		return Base.getAll_as(this.model, this.getResource(), INHERITEDBY, Thing.class);
	}
 
    /**
     * Adds a value to property Inheritedby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInheritedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INHERITEDBY, value);
	}
	
    /**
     * Adds a value to property Inheritedby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInheritedby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INHERITEDBY, value);
	}
    /**
     * Adds a value to property Inheritedby from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInheritedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INHERITEDBY, value);
	}
	
    /**
     * Adds a value to property Inheritedby from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInheritedby(Thing value) {
		Base.add(this.model, this.getResource(), INHERITEDBY, value);
	}
  

    /**
     * Sets a value of property Inheritedby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInheritedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INHERITEDBY, value);
	}
	
    /**
     * Sets a value of property Inheritedby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInheritedby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INHERITEDBY, value);
	}
    /**
     * Sets a value of property Inheritedby from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInheritedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INHERITEDBY, value);
	}
	
    /**
     * Sets a value of property Inheritedby from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInheritedby(Thing value) {
		Base.set(this.model, this.getResource(), INHERITEDBY, value);
	}
  


    /**
     * Removes a value of property Inheritedby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInheritedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INHERITEDBY, value);
	}
	
    /**
     * Removes a value of property Inheritedby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInheritedby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INHERITEDBY, value);
	}
    /**
     * Removes a value of property Inheritedby given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInheritedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INHERITEDBY, value);
	}
	
    /**
     * Removes a value of property Inheritedby given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInheritedby(Thing value) {
		Base.remove(this.model, this.getResource(), INHERITEDBY, value);
	}
  
    /**
     * Removes all values of property Inheritedby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInheritedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INHERITEDBY);
	}
	
    /**
     * Removes all values of property Inheritedby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInheritedby() {
		Base.removeAll(this.model, this.getResource(), INHERITEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b70d9d4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPassedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PASSEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b70d9d4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPassedto() {
		return Base.has(this.model, this.getResource(), PASSEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b70d9d4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPassedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PASSEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b70d9d4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPassedto( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PASSEDTO);
	}

     /**
     * Get all values of property Passedto as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPassedto_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PASSEDTO);
	}
	
    /**
     * Get all values of property Passedto as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPassedto_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PASSEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Passedto as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPassedto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PASSEDTO);
	}

    /**
     * Get all values of property Passedto as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPassedto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PASSEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Passedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPassedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PASSEDTO, Thing.class);
	}
	
    /**
     * Get all values of property Passedto as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPassedto_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PASSEDTO, Thing.class);
	}

    /**
     * Get all values of property Passedto     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPassedto() {
		return Base.getAll(this.model, this.getResource(), PASSEDTO, Thing.class);
	}

    /**
     * Get all values of property Passedto as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPassedto_as() {
		return Base.getAll_as(this.model, this.getResource(), PASSEDTO, Thing.class);
	}
 
    /**
     * Adds a value to property Passedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPassedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PASSEDTO, value);
	}
	
    /**
     * Adds a value to property Passedto as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPassedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PASSEDTO, value);
	}
    /**
     * Adds a value to property Passedto from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPassedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PASSEDTO, value);
	}
	
    /**
     * Adds a value to property Passedto from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPassedto(Thing value) {
		Base.add(this.model, this.getResource(), PASSEDTO, value);
	}
  

    /**
     * Sets a value of property Passedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPassedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PASSEDTO, value);
	}
	
    /**
     * Sets a value of property Passedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPassedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PASSEDTO, value);
	}
    /**
     * Sets a value of property Passedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPassedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PASSEDTO, value);
	}
	
    /**
     * Sets a value of property Passedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPassedto(Thing value) {
		Base.set(this.model, this.getResource(), PASSEDTO, value);
	}
  


    /**
     * Removes a value of property Passedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePassedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PASSEDTO, value);
	}
	
    /**
     * Removes a value of property Passedto as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePassedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PASSEDTO, value);
	}
    /**
     * Removes a value of property Passedto given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePassedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PASSEDTO, value);
	}
	
    /**
     * Removes a value of property Passedto given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePassedto(Thing value) {
		Base.remove(this.model, this.getResource(), PASSEDTO, value);
	}
  
    /**
     * Removes all values of property Passedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPassedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PASSEDTO);
	}
	
    /**
     * Removes all values of property Passedto	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPassedto() {
		Base.removeAll(this.model, this.getResource(), PASSEDTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1070ed00 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1070ed00 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSourcevalue() {
		return Base.has(this.model, this.getResource(), SOURCEVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1070ed00 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1070ed00 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSourcevalue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUE);
	}

     /**
     * Get all values of property Sourcevalue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevalue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUE);
	}
	
    /**
     * Get all values of property Sourcevalue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevalue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sourcevalue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUE);
	}

    /**
     * Get all values of property Sourcevalue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sourcevalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllSourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUE, A_0.class);
	}
	
    /**
     * Get all values of property Sourcevalue as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllSourcevalue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUE, A_0.class);
	}

    /**
     * Get all values of property Sourcevalue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllSourcevalue() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUE, A_0.class);
	}

    /**
     * Get all values of property Sourcevalue as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllSourcevalue_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUE, A_0.class);
	}
 
    /**
     * Adds a value to property Sourcevalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCEVALUE, value);
	}
	
    /**
     * Adds a value to property Sourcevalue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSourcevalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Adds a value to property Sourcevalue from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, SOURCEVALUE, value);
	}
	
    /**
     * Adds a value to property Sourcevalue from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSourcevalue(A_0 value) {
		Base.add(this.model, this.getResource(), SOURCEVALUE, value);
	}
  

    /**
     * Sets a value of property Sourcevalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCEVALUE, value);
	}
	
    /**
     * Sets a value of property Sourcevalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSourcevalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Sets a value of property Sourcevalue from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, SOURCEVALUE, value);
	}
	
    /**
     * Sets a value of property Sourcevalue from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSourcevalue(A_0 value) {
		Base.set(this.model, this.getResource(), SOURCEVALUE, value);
	}
  


    /**
     * Removes a value of property Sourcevalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCEVALUE, value);
	}
	
    /**
     * Removes a value of property Sourcevalue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSourcevalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Removes a value of property Sourcevalue given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSourcevalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, SOURCEVALUE, value);
	}
	
    /**
     * Removes a value of property Sourcevalue given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSourcevalue(A_0 value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUE, value);
	}
  
    /**
     * Removes all values of property Sourcevalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSourcevalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUE);
	}
	
    /**
     * Removes all values of property Sourcevalue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSourcevalue() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a7ecb9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSourcevalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUESET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a7ecb9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSourcevalueset() {
		return Base.has(this.model, this.getResource(), SOURCEVALUESET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a7ecb9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSourcevalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUESET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a7ecb9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSourcevalueset( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUESET);
	}

     /**
     * Get all values of property Sourcevalueset as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueset_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUESET);
	}
	
    /**
     * Get all values of property Sourcevalueset as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueset_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sourcevalueset as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUESET);
	}

    /**
     * Get all values of property Sourcevalueset as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sourcevalueset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllSourcevalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUESET, A_0.class);
	}
	
    /**
     * Get all values of property Sourcevalueset as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllSourcevalueset_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, A_0.class);
	}

    /**
     * Get all values of property Sourcevalueset     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllSourcevalueset() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUESET, A_0.class);
	}

    /**
     * Get all values of property Sourcevalueset as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllSourcevalueset_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, A_0.class);
	}
 
    /**
     * Adds a value to property Sourcevalueset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSourcevalueset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCEVALUESET, value);
	}
	
    /**
     * Adds a value to property Sourcevalueset as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSourcevalueset( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Adds a value to property Sourcevalueset from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSourcevalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, SOURCEVALUESET, value);
	}
	
    /**
     * Adds a value to property Sourcevalueset from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSourcevalueset(A_0 value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESET, value);
	}
  

    /**
     * Sets a value of property Sourcevalueset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSourcevalueset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCEVALUESET, value);
	}
	
    /**
     * Sets a value of property Sourcevalueset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSourcevalueset( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Sets a value of property Sourcevalueset from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSourcevalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, SOURCEVALUESET, value);
	}
	
    /**
     * Sets a value of property Sourcevalueset from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSourcevalueset(A_0 value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESET, value);
	}
  


    /**
     * Removes a value of property Sourcevalueset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSourcevalueset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCEVALUESET, value);
	}
	
    /**
     * Removes a value of property Sourcevalueset as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSourcevalueset( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Removes a value of property Sourcevalueset given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSourcevalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, SOURCEVALUESET, value);
	}
	
    /**
     * Removes a value of property Sourcevalueset given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSourcevalueset(A_0 value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESET, value);
	}
  
    /**
     * Removes all values of property Sourcevalueset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSourcevalueset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUESET);
	}
	
    /**
     * Removes all values of property Sourcevalueset	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSourcevalueset() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUESET);
	}
 }