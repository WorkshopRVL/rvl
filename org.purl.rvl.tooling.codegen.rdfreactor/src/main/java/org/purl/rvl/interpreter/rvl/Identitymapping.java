/*
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z max.at.xam.de@gmail.com $) on 03.11.13 12:50
 */
package org.purl.rvl.interpreter.rvl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * Comment from schema: Also referred to as "Passthrough Mapping" in some tools.
 *
 * This class manages access to these properties:
 * <ul>
 *   <li>Fallsbackto</li>
 *   <li>Includeinlegend</li>
 *   <li>SourceValue</li>
 *   <li>SourceValueSet</li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 03.11.13 12:50
 */
public class Identitymapping extends PropertyMapping {

    private static final long serialVersionUID = -6385372438162088133L;

    /** http://purl.org/rvl/IdentityMapping */
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/rvl/IdentityMapping", false);

    /** http://purl.org/rvl/fallsBackTo */
	public static final URI FALLSBACKTO = new URIImpl("http://purl.org/rvl/fallsBackTo", false);

    /** http://purl.org/rvl/includeInLegend */
	public static final URI INCLUDEINLEGEND = new URIImpl("http://purl.org/rvl/includeInLegend", false);

    /** http://purl.org/rvl/sourceValue */
	public static final URI SOURCEVALUE = new URIImpl("http://purl.org/rvl/sourceValue", false);

    /** http://purl.org/rvl/sourceValueSet */
	public static final URI SOURCEVALUESET = new URIImpl("http://purl.org/rvl/sourceValueSet", false);

    /**
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/rvl/fallsBackTo", false),
      new URIImpl("http://purl.org/rvl/includeInLegend", false),
      new URIImpl("http://purl.org/rvl/sourceValue", false),
      new URIImpl("http://purl.org/rvl/sourceValueSet", false)
    };


	// protected constructors needed for inheritance

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1]
	 */
	protected Identitymapping (Model model, URI classURI, Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2]
	 */
	public Identitymapping (Model model, Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7]
	 */
	public Identitymapping (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8]
	 */
	public Identitymapping (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9]
	 */
	public Identitymapping (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Identitymapping or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0]
	 */
	public static Identitymapping getInstance(Model model, Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Identitymapping.class);
	}

	/**
	 * Create a new instance of this class in the model.
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/rvl/IdentityMapping).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1]
	 */
	public static void createInstance(Model model, Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2]
	 */
	public static boolean hasInstance(Model model, Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3]
	 */
	public static ClosableIterator<Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as]
	 */
	public static ReactorResult<? extends Identitymapping> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Identitymapping.class );
	}

    /**
	 * Remove triple {@code (this, rdf:type, Identitymapping)} from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4]
	 */
	public static void deleteInstance(Model model, Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class5]
	 */
	public static void deleteAllProperties(Model model,	Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if {@code Fallsbackto} has at least one value set.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasFallsbackto(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, FALLSBACKTO);
	}

    /**
     * Check if {@code Fallsbackto} has at least one value set.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasFallsbackto() {
		return Base.has(this.model, this.getResource(), FALLSBACKTO);
	}

    /**
     * Check if {@code Fallsbackto} has the given value (maybe among other values).
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasFallsbackto(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, FALLSBACKTO, value);
	}

    /**
     * Check if {@code Fallsbackto} has the given value (maybe among other values).
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasFallsbackto( Node value ) {
		return Base.hasValue(this.model, this.getResource(), FALLSBACKTO, value);
	}

     /**
     * Get all values of property {@code Fallsbackto} as an Iterator over RDF2Go nodes.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllFallsbackto_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FALLSBACKTO);
	}

    /**
     * Get all values of property {@code Fallsbackto} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllFallsbackto_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FALLSBACKTO, Node.class);
	}

    /**
     * Get all values of property {@code Fallsbackto} as an Iterator over RDF2Go nodes
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllFallsbackto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FALLSBACKTO);
	}

    /**
     * Get all values of property {@code Fallsbackto} as a ReactorResult of RDF2Go nodes.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllFallsbackto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FALLSBACKTO, Node.class);
	}
 
    /**
     * Get all values of property {@code Fallsbackto}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<Mapping> getAllFallsbackto(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, FALLSBACKTO, Mapping.class);
	}

    /**
     * Get all values of property {@code Fallsbackto} as a ReactorResult of {@linkplain Mapping}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<Mapping> getAllFallsbackto_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FALLSBACKTO, Mapping.class);
	}

    /**
     * Get all values of property {@code Fallsbackto}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<Mapping> getAllFallsbackto() {
		return Base.getAll(this.model, this.getResource(), FALLSBACKTO, Mapping.class);
	}

    /**
     * Get all values of property {@code Fallsbackto} as a ReactorResult of {@linkplain Mapping}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<Mapping> getAllFallsbackto_as() {
		return Base.getAll_as(this.model, this.getResource(), FALLSBACKTO, Mapping.class);
	}

 
    /**
     * Adds a value to property {@code Fallsbackto} as an RDF2Go {@linkplain Node}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addFallsbackto(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, FALLSBACKTO, value);
	}

    /**
     * Adds a value to property {@code Fallsbackto} as an RDF2Go {@linkplain Node}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addFallsbackto(Node value) {
		Base.add(this.model, this.getResource(), FALLSBACKTO, value);
	}
    /**
     * Adds a value to property {@code Fallsbackto} from an instance of {@linkplain Mapping}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addFallsbackto(Model model, Resource instanceResource, Mapping value) {
		Base.add(model, instanceResource, FALLSBACKTO, value);
	}

    /**
     * Adds a value to property {@code Fallsbackto} from an instance of {@linkplain Mapping}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addFallsbackto(Mapping value) {
		Base.add(this.model, this.getResource(), FALLSBACKTO, value);
	}
  

    /**
     * Sets a value of property {@code Fallsbackto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setFallsbackto(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, FALLSBACKTO, value);
	}

    /**
     * Sets a value of property {@code Fallsbackto} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setFallsbackto(Node value) {
		Base.set(this.model, this.getResource(), FALLSBACKTO, value);
	}
    /**
     * Sets a value of property {@code Fallsbackto} from an instance of {@linkplain Mapping}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setFallsbackto(Model model, Resource instanceResource, Mapping value) {
		Base.set(model, instanceResource, FALLSBACKTO, value);
	}

    /**
     * Sets a value of property {@code Fallsbackto} from an instance of {@linkplain Mapping}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setFallsbackto(Mapping value) {
		Base.set(this.model, this.getResource(), FALLSBACKTO, value);
	}
  


    /**
     * Removes a value of property {@code Fallsbackto} as an RDF2Go {@linkplain Node}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeFallsbackto(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, FALLSBACKTO, value);
	}

    /**
     * Removes a value of property {@code Fallsbackto} as an RDF2Go {@linkplain Node}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeFallsbackto(Node value) {
		Base.remove(this.model, this.getResource(), FALLSBACKTO, value);
	}
    /**
     * Removes a value of property {@code Fallsbackto} given as an instance of {@linkplain Mapping}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeFallsbackto(Model model, Resource instanceResource, Mapping value) {
		Base.remove(model, instanceResource, FALLSBACKTO, value);
	}

    /**
     * Removes a value of property {@code Fallsbackto} given as an instance of {@linkplain Mapping}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeFallsbackto(Mapping value) {
		Base.remove(this.model, this.getResource(), FALLSBACKTO, value);
	}
  
    /**
     * Removes all values of property {@code Fallsbackto}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllFallsbackto(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, FALLSBACKTO);
	}

    /**
     * Removes all values of property {@code Fallsbackto}.
     * Comment from schema: We decided to allow the definitions of fall-backs on the level of mappings instead of the level of visual means,  to allow for context-dependent decisions. Still, fall-backs between visual means could be defined additionally in future versions of this vocabulary.
     *
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllFallsbackto() {
		Base.removeAll(this.model, this.getResource(), FALLSBACKTO);
	}
     /**
     * Check if {@code Includeinlegend} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasIncludeinlegend(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, INCLUDEINLEGEND);
	}

    /**
     * Check if {@code Includeinlegend} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasIncludeinlegend() {
		return Base.has(this.model, this.getResource(), INCLUDEINLEGEND);
	}

    /**
     * Check if {@code Includeinlegend} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasIncludeinlegend(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, INCLUDEINLEGEND, value);
	}

    /**
     * Check if {@code Includeinlegend} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasIncludeinlegend( Node value ) {
		return Base.hasValue(this.model, this.getResource(), INCLUDEINLEGEND, value);
	}

     /**
     * Get all values of property {@code Includeinlegend} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllIncludeinlegend_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INCLUDEINLEGEND);
	}

    /**
     * Get all values of property {@code Includeinlegend} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllIncludeinlegend_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INCLUDEINLEGEND, Node.class);
	}

    /**
     * Get all values of property {@code Includeinlegend} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllIncludeinlegend_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INCLUDEINLEGEND);
	}

    /**
     * Get all values of property {@code Includeinlegend} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllIncludeinlegend_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INCLUDEINLEGEND, Node.class);
	}
 
    /**
     * Get all values of property {@code Includeinlegend}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.Boolean> getAllIncludeinlegend(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, INCLUDEINLEGEND, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Includeinlegend} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.Boolean> getAllIncludeinlegend_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INCLUDEINLEGEND, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Includeinlegend}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.Boolean> getAllIncludeinlegend() {
		return Base.getAll(this.model, this.getResource(), INCLUDEINLEGEND, java.lang.Boolean.class);
	}

    /**
     * Get all values of property {@code Includeinlegend} as a ReactorResult of {@linkplain java.lang.Boolean}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.Boolean> getAllIncludeinlegend_as() {
		return Base.getAll_as(this.model, this.getResource(), INCLUDEINLEGEND, java.lang.Boolean.class);
	}

 
    /**
     * Adds a value to property {@code Includeinlegend} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addIncludeinlegend(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, INCLUDEINLEGEND, value);
	}

    /**
     * Adds a value to property {@code Includeinlegend} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addIncludeinlegend(Node value) {
		Base.add(this.model, this.getResource(), INCLUDEINLEGEND, value);
	}
    /**
     * Adds a value to property {@code Includeinlegend} from an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addIncludeinlegend(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, INCLUDEINLEGEND, value);
	}

    /**
     * Adds a value to property {@code Includeinlegend} from an instance of {@linkplain java.lang.Boolean}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addIncludeinlegend(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), INCLUDEINLEGEND, value);
	}
  

    /**
     * Sets a value of property {@code Includeinlegend} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setIncludeinlegend(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, INCLUDEINLEGEND, value);
	}

    /**
     * Sets a value of property {@code Includeinlegend} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setIncludeinlegend(Node value) {
		Base.set(this.model, this.getResource(), INCLUDEINLEGEND, value);
	}
    /**
     * Sets a value of property {@code Includeinlegend} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setIncludeinlegend(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, INCLUDEINLEGEND, value);
	}

    /**
     * Sets a value of property {@code Includeinlegend} from an instance of {@linkplain java.lang.Boolean}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setIncludeinlegend(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), INCLUDEINLEGEND, value);
	}
  


    /**
     * Removes a value of property {@code Includeinlegend} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeIncludeinlegend(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, INCLUDEINLEGEND, value);
	}

    /**
     * Removes a value of property {@code Includeinlegend} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeIncludeinlegend(Node value) {
		Base.remove(this.model, this.getResource(), INCLUDEINLEGEND, value);
	}
    /**
     * Removes a value of property {@code Includeinlegend} given as an instance of {@linkplain java.lang.Boolean}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeIncludeinlegend(Model model, Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, INCLUDEINLEGEND, value);
	}

    /**
     * Removes a value of property {@code Includeinlegend} given as an instance of {@linkplain java.lang.Boolean}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeIncludeinlegend(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), INCLUDEINLEGEND, value);
	}
  
    /**
     * Removes all values of property {@code Includeinlegend}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllIncludeinlegend(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, INCLUDEINLEGEND);
	}

    /**
     * Removes all values of property {@code Includeinlegend}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllIncludeinlegend() {
		Base.removeAll(this.model, this.getResource(), INCLUDEINLEGEND);
	}
     /**
     * Check if {@code SourceValue} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourceValue(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUE);
	}

    /**
     * Check if {@code SourceValue} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourceValue() {
		return Base.has(this.model, this.getResource(), SOURCEVALUE);
	}

    /**
     * Check if {@code SourceValue} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourceValue(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Check if {@code SourceValue} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourceValue( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUE, value);
	}

     /**
     * Get all values of property {@code SourceValue} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourceValue_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUE);
	}

    /**
     * Get all values of property {@code SourceValue} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourceValue_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUE, Node.class);
	}

    /**
     * Get all values of property {@code SourceValue} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourceValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUE);
	}

    /**
     * Get all values of property {@code SourceValue} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourceValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUE, Node.class);
	}
    /**
     * Get all values of property {@code SourceValue} as ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of java.lang.String
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<java.lang.String> getAllSourceValue_asjava_lang_String(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code SourceValue} as ReactorResult of {@linkplain java.lang.String}.
     * @return a ClosableIterator of java.lang.String
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<java.lang.String> getAllSourceValue_asjava_lang_String() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code SourceValue} as ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of A_1
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<A_1> getAllSourceValue_asA_1(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUE, A_1.class);
	}

    /**
     * Get all values of property {@code SourceValue} as ReactorResult of {@linkplain A_1}.
     * @return a ClosableIterator of A_1
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<A_1> getAllSourceValue_asA_1() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUE, A_1.class);
	}

    /**
     * Get all values of property {@code SourceValue} as ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Resource
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSourceValue_asorg_ontoware_rdfreactor_schema_rdfs_Resource(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property {@code SourceValue} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Resource
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSourceValue_asorg_ontoware_rdfreactor_schema_rdfs_Resource() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

  
    /**
     * Get all values of property {@code SourceValue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<java.lang.String> getAllSourceValue(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code SourceValue} as a ReactorResult of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<java.lang.String> getAllSourceValue_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code SourceValue}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<java.lang.String> getAllSourceValue() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUE, java.lang.String.class);
	}

    /**
     * Get all values of property {@code SourceValue} as a ReactorResult of {@linkplain java.lang.String}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<java.lang.String> getAllSourceValue_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUE, java.lang.String.class);
	}

 
    /**
     * Adds a value to property {@code SourceValue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourceValue(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code SourceValue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourceValue(Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Adds a value to property {@code SourceValue} from an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourceValue(Model model, Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code SourceValue} from an instance of {@linkplain java.lang.String}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourceValue(java.lang.String value) {
		Base.add(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Adds a value to property {@code SourceValue} from an instance of {@linkplain A_1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourceValue(Model model, Resource instanceResource, A_1 value) {
		Base.add(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code SourceValue} from an instance of {@linkplain A_1}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourceValue(A_1 value) {
		Base.add(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Adds a value to property {@code SourceValue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourceValue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Adds a value to property {@code SourceValue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourceValue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), SOURCEVALUE, value);
	}
  

    /**
     * Sets a value of property {@code SourceValue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourceValue(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code SourceValue} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourceValue(Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Sets a value of property {@code SourceValue} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourceValue(Model model, Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code SourceValue} from an instance of {@linkplain java.lang.String}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourceValue(java.lang.String value) {
		Base.set(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Sets a value of property {@code SourceValue} from an instance of {@linkplain A_1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourceValue(Model model, Resource instanceResource, A_1 value) {
		Base.set(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code SourceValue} from an instance of {@linkplain A_1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourceValue(A_1 value) {
		Base.set(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Sets a value of property {@code SourceValue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourceValue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Sets a value of property {@code SourceValue} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourceValue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), SOURCEVALUE, value);
	}
  


    /**
     * Removes a value of property {@code SourceValue} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourceValue(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code SourceValue} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourceValue(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Removes a value of property {@code SourceValue} given as an instance of {@linkplain java.lang.String}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourceValue(Model model, Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code SourceValue} given as an instance of {@linkplain java.lang.String}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourceValue(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Removes a value of property {@code SourceValue} given as an instance of {@linkplain A_1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourceValue(Model model, Resource instanceResource, A_1 value) {
		Base.remove(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code SourceValue} given as an instance of {@linkplain A_1}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourceValue(A_1 value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUE, value);
	}
    /**
     * Removes a value of property {@code SourceValue} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourceValue(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, SOURCEVALUE, value);
	}

    /**
     * Removes a value of property {@code SourceValue} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Resource}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourceValue(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUE, value);
	}
  
    /**
     * Removes all values of property {@code SourceValue}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourceValue(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUE);
	}

    /**
     * Removes all values of property {@code SourceValue}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourceValue() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUE);
	}
     /**
     * Check if {@code SourceValueSet} has at least one value set.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static]
     */
	public static boolean hasSourceValueSet(Model model, Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUESET);
	}

    /**
     * Check if {@code SourceValueSet} has at least one value set.
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic]
     */
	public boolean hasSourceValueSet() {
		return Base.has(this.model, this.getResource(), SOURCEVALUESET);
	}

    /**
     * Check if {@code SourceValueSet} has the given value (maybe among other values).
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static]
     */
	public static boolean hasSourceValueSet(Model model, Resource instanceResource, Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Check if {@code SourceValueSet} has the given value (maybe among other values).
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
	public boolean hasSourceValueSet( Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUESET, value);
	}

     /**
     * Get all values of property {@code SourceValueSet} as an Iterator over RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static]
     */
	public static ClosableIterator<Node> getAllSourceValueSet_asNode(Model model, Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUESET);
	}

    /**
     * Get all values of property {@code SourceValueSet} as a ReactorResult of RDF2Go nodes.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result]
     */
	public static ReactorResult<Node> getAllSourceValueSet_asNode_(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, Node.class);
	}

    /**
     * Get all values of property {@code SourceValueSet} as an Iterator over RDF2Go nodes
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic]
     */
	public ClosableIterator<Node> getAllSourceValueSet_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUESET);
	}

    /**
     * Get all values of property {@code SourceValueSet} as a ReactorResult of RDF2Go nodes.
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result]
     */
	public ReactorResult<Node> getAllSourceValueSet_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, Node.class);
	}
    /**
     * Get all values of property {@code SourceValueSet} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Container
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourceValueSet_asorg_ontoware_rdfreactor_schema_rdfs_Container(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code SourceValueSet} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Container
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourceValueSet_asorg_ontoware_rdfreactor_schema_rdfs_Container() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code SourceValueSet} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of A_1
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<A_1> getAllSourceValueSet_asA_1(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, A_1.class);
	}

    /**
     * Get all values of property {@code SourceValueSet} as ReactorResult of {@linkplain A_1}.
     * @return a ClosableIterator of A_1
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<A_1> getAllSourceValueSet_asA_1() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, A_1.class);
	}

    /**
     * Get all values of property {@code SourceValueSet} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.List
	 *
	 * [Generated from RDFReactor template rule #get9static]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourceValueSet_asorg_ontoware_rdfreactor_schema_rdfs_List(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}

    /**
     * Get all values of property {@code SourceValueSet} as ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.List
	 *
	 * [Generated from RDFReactor template rule #get10dynamic]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourceValueSet_asorg_ontoware_rdfreactor_schema_rdfs_List() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}

  
    /**
     * Get all values of property {@code SourceValueSet}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static]
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourceValueSet(Model model, Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code SourceValueSet} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult]
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourceValueSet_as(Model model, Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code SourceValueSet}.
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic]
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourceValueSet() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

    /**
     * Get all values of property {@code SourceValueSet} as a ReactorResult of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Container> getAllSourceValueSet_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESET, org.ontoware.rdfreactor.schema.rdfs.Container.class);
	}

 
    /**
     * Adds a value to property {@code SourceValueSet} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static]
     */
	public static void addSourceValueSet(Model model, Resource instanceResource, Node value) {
		Base.add(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Adds a value to property {@code SourceValueSet} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic]
     */
	public void addSourceValueSet(Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Adds a value to property {@code SourceValueSet} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourceValueSet(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.add(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Adds a value to property {@code SourceValueSet} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourceValueSet(org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Adds a value to property {@code SourceValueSet} from an instance of {@linkplain A_1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourceValueSet(Model model, Resource instanceResource, A_1 value) {
		Base.add(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Adds a value to property {@code SourceValueSet} from an instance of {@linkplain A_1}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourceValueSet(A_1 value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Adds a value to property {@code SourceValueSet} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @param value
	 *
	 * [Generated from RDFReactor template rule #add3static]
     */
	public static void addSourceValueSet(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.add(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Adds a value to property {@code SourceValueSet} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
	 *
	 * [Generated from RDFReactor template rule #add4dynamic]
     */
	public void addSourceValueSet(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESET, value);
	}
  

    /**
     * Sets a value of property {@code SourceValueSet} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static]
     */
	public static void setSourceValueSet(Model model, Resource instanceResource, Node value) {
		Base.set(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Sets a value of property {@code SourceValueSet} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic]
     */
	public void setSourceValueSet(Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Sets a value of property {@code SourceValueSet} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourceValueSet(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.set(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Sets a value of property {@code SourceValueSet} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourceValueSet(org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Sets a value of property {@code SourceValueSet} from an instance of {@linkplain A_1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourceValueSet(Model model, Resource instanceResource, A_1 value) {
		Base.set(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Sets a value of property {@code SourceValueSet} from an instance of {@linkplain A_1}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourceValueSet(A_1 value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Sets a value of property {@code SourceValueSet} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static]
     */
	public static void setSourceValueSet(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Sets a value of property {@code SourceValueSet} from an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no {@code minCardinality} or {@code minCardinality == 1}.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic]
     */
	public void setSourceValueSet(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESET, value);
	}
  


    /**
     * Removes a value of property {@code SourceValueSet} as an RDF2Go {@linkplain Node}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static]
     */
	public static void removeSourceValueSet(Model model, Resource instanceResource, Node value) {
		Base.remove(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Removes a value of property {@code SourceValueSet} as an RDF2Go {@linkplain Node}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic]
     */
	public void removeSourceValueSet(Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Removes a value of property {@code SourceValueSet} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourceValueSet(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.remove(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Removes a value of property {@code SourceValueSet} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.Container}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourceValueSet(org.ontoware.rdfreactor.schema.rdfs.Container value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Removes a value of property {@code SourceValueSet} given as an instance of {@linkplain A_1}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourceValueSet(Model model, Resource instanceResource, A_1 value) {
		Base.remove(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Removes a value of property {@code SourceValueSet} given as an instance of {@linkplain A_1}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourceValueSet(A_1 value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESET, value);
	}
    /**
     * Removes a value of property {@code SourceValueSet} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static]
     */
	public static void removeSourceValueSet(Model model, Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(model, instanceResource, SOURCEVALUESET, value);
	}

    /**
     * Removes a value of property {@code SourceValueSet} given as an instance of {@linkplain org.ontoware.rdfreactor.schema.rdfs.List}.
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic]
     */
	public void removeSourceValueSet(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESET, value);
	}
  
    /**
     * Removes all values of property {@code SourceValueSet}.
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static]
     */
	public static void removeAllSourceValueSet(Model model, Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUESET);
	}

    /**
     * Removes all values of property {@code SourceValueSet}.
	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic]
     */
	public void removeAllSourceValueSet() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUESET);
	}
 }