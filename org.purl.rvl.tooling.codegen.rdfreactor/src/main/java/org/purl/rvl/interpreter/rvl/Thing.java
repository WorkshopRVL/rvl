/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 29.10.13 09:05
 */
package org.purl.rvl.interpreter.rvl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AllValuesFrom </li>
 *   <li> ComplementOf </li>
 *   <li> Description </li>
 *   <li> EditorialNote </li>
 *   <li> Example </li>
 *   <li> Existentialpropertymapping </li>
 *   <li> Imports </li>
 *   <li> Neutralvalue </li>
 *   <li> OnClass </li>
 *   <li> OnProperty </li>
 *   <li> OneOf </li>
 *   <li> Preferredproperty </li>
 *   <li> QualifiedCardinality </li>
 *   <li> Related </li>
 *   <li> Simplificationproperty </li>
 *   <li> SomeValuesFrom </li>
 *   <li> Somehowrelatedto </li>
 *   <li> Submappingrelationproperty </li>
 *   <li> Targetvalue </li>
 *   <li> Targetvaluecycle </li>
 *   <li> Targetvaluelist </li>
 *   <li> Targetvalueorderedset </li>
 *   <li> Targetvalueset </li>
 *   <li> Termstatus </li>
 *   <li> UnionOf </li>
 *   <li> Uripseudoproperty </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 29.10.13 09:05
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www.w3.org/2002/07/owl#allValuesFrom */
    @SuppressWarnings("hiding")
	public static final URI ALLVALUESFROM = new URIImpl("http://www.w3.org/2002/07/owl#allValuesFrom",false);

    /** http://www.w3.org/2002/07/owl#complementOf */
    @SuppressWarnings("hiding")
	public static final URI COMPLEMENTOF = new URIImpl("http://www.w3.org/2002/07/owl#complementOf",false);

    /** http://purl.org/dc/terms/description */
    @SuppressWarnings("hiding")
	public static final URI DESCRIPTION = new URIImpl("http://purl.org/dc/terms/description",false);

    /** http://www.w3.org/2004/02/skos/core#editorialNote */
    @SuppressWarnings("hiding")
	public static final URI EDITORIALNOTE = new URIImpl("http://www.w3.org/2004/02/skos/core#editorialNote",false);

    /** http://www.w3.org/2004/02/skos/core#example */
    @SuppressWarnings("hiding")
	public static final URI EXAMPLE = new URIImpl("http://www.w3.org/2004/02/skos/core#example",false);

    /** http://purl.org/rvl/isExistentialPropertyMapping */
    @SuppressWarnings("hiding")
	public static final URI EXISTENTIALPROPERTYMAPPING = new URIImpl("http://purl.org/rvl/isExistentialPropertyMapping",false);

    /** http://www.w3.org/2002/07/owl#imports */
    @SuppressWarnings("hiding")
	public static final URI IMPORTS = new URIImpl("http://www.w3.org/2002/07/owl#imports",false);

    /** http://purl.org/rvl/neutralValue */
    @SuppressWarnings("hiding")
	public static final URI NEUTRALVALUE = new URIImpl("http://purl.org/rvl/neutralValue",false);

    /** http://www.w3.org/2002/07/owl#onClass */
    @SuppressWarnings("hiding")
	public static final URI ONCLASS = new URIImpl("http://www.w3.org/2002/07/owl#onClass",false);

    /** http://www.w3.org/2002/07/owl#onProperty */
    @SuppressWarnings("hiding")
	public static final URI ONPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#onProperty",false);

    /** http://www.w3.org/2002/07/owl#oneOf */
    @SuppressWarnings("hiding")
	public static final URI ONEOF = new URIImpl("http://www.w3.org/2002/07/owl#oneOf",false);

    /** http://purl.org/rvl/preferredProperty */
    @SuppressWarnings("hiding")
	public static final URI PREFERREDPROPERTY = new URIImpl("http://purl.org/rvl/preferredProperty",false);

    /** http://www.w3.org/2002/07/owl#qualifiedCardinality */
    @SuppressWarnings("hiding")
	public static final URI QUALIFIEDCARDINALITY = new URIImpl("http://www.w3.org/2002/07/owl#qualifiedCardinality",false);

    /** http://www.w3.org/2004/02/skos/core#related */
    @SuppressWarnings("hiding")
	public static final URI RELATED = new URIImpl("http://www.w3.org/2004/02/skos/core#related",false);

    /** http://purl.org/rvl/simplificationProperty */
    @SuppressWarnings("hiding")
	public static final URI SIMPLIFICATIONPROPERTY = new URIImpl("http://purl.org/rvl/simplificationProperty",false);

    /** http://www.w3.org/2002/07/owl#someValuesFrom */
    @SuppressWarnings("hiding")
	public static final URI SOMEVALUESFROM = new URIImpl("http://www.w3.org/2002/07/owl#someValuesFrom",false);

    /** http://purl.org/rvl/topProperty */
    @SuppressWarnings("hiding")
	public static final URI SOMEHOWRELATEDTO = new URIImpl("http://purl.org/rvl/topProperty",false);

    /** http://purl.org/rvl/subMappingRelationProperty */
    @SuppressWarnings("hiding")
	public static final URI SUBMAPPINGRELATIONPROPERTY = new URIImpl("http://purl.org/rvl/subMappingRelationProperty",false);

    /** http://purl.org/rvl/targetValue */
    @SuppressWarnings("hiding")
	public static final URI TARGETVALUE = new URIImpl("http://purl.org/rvl/targetValue",false);

    /** http://purl.org/rvl/targetValueCycle */
    @SuppressWarnings("hiding")
	public static final URI TARGETVALUECYCLE = new URIImpl("http://purl.org/rvl/targetValueCycle",false);

    /** http://purl.org/rvl/targetValueList */
    @SuppressWarnings("hiding")
	public static final URI TARGETVALUELIST = new URIImpl("http://purl.org/rvl/targetValueList",false);

    /** http://purl.org/rvl/targetValueOrderedSet */
    @SuppressWarnings("hiding")
	public static final URI TARGETVALUEORDEREDSET = new URIImpl("http://purl.org/rvl/targetValueOrderedSet",false);

    /** http://purl.org/rvl/targetValueSet */
    @SuppressWarnings("hiding")
	public static final URI TARGETVALUESET = new URIImpl("http://purl.org/rvl/targetValueSet",false);

    /** http://www.w3.org/2003/06/sw-vocab-status/ns#term_status */
    @SuppressWarnings("hiding")
	public static final URI TERMSTATUS = new URIImpl("http://www.w3.org/2003/06/sw-vocab-status/ns#term_status",false);

    /** http://www.w3.org/2002/07/owl#unionOf */
    @SuppressWarnings("hiding")
	public static final URI UNIONOF = new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false);

    /** http://purl.org/rvl/uriPseudoProperty */
    @SuppressWarnings("hiding")
	public static final URI URIPSEUDOPROPERTY = new URIImpl("http://purl.org/rvl/uriPseudoProperty",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#allValuesFrom",false),
      new URIImpl("http://www.w3.org/2002/07/owl#complementOf",false),
      new URIImpl("http://purl.org/dc/terms/description",false),
      new URIImpl("http://www.w3.org/2004/02/skos/core#editorialNote",false),
      new URIImpl("http://www.w3.org/2004/02/skos/core#example",false),
      new URIImpl("http://purl.org/rvl/isExistentialPropertyMapping",false),
      new URIImpl("http://www.w3.org/2002/07/owl#imports",false),
      new URIImpl("http://purl.org/rvl/neutralValue",false),
      new URIImpl("http://www.w3.org/2002/07/owl#onClass",false),
      new URIImpl("http://www.w3.org/2002/07/owl#onProperty",false),
      new URIImpl("http://www.w3.org/2002/07/owl#oneOf",false),
      new URIImpl("http://purl.org/rvl/preferredProperty",false),
      new URIImpl("http://www.w3.org/2002/07/owl#qualifiedCardinality",false),
      new URIImpl("http://www.w3.org/2004/02/skos/core#related",false),
      new URIImpl("http://purl.org/rvl/simplificationProperty",false),
      new URIImpl("http://www.w3.org/2002/07/owl#someValuesFrom",false),
      new URIImpl("http://purl.org/rvl/topProperty",false),
      new URIImpl("http://purl.org/rvl/subMappingRelationProperty",false),
      new URIImpl("http://purl.org/rvl/targetValue",false),
      new URIImpl("http://purl.org/rvl/targetValueCycle",false),
      new URIImpl("http://purl.org/rvl/targetValueList",false),
      new URIImpl("http://purl.org/rvl/targetValueOrderedSet",false),
      new URIImpl("http://purl.org/rvl/targetValueSet",false),
      new URIImpl("http://www.w3.org/2003/06/sw-vocab-status/ns#term_status",false),
      new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false),
      new URIImpl("http://purl.org/rvl/uriPseudoProperty",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AllValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAllValuesFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ALLVALUESFROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AllValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAllValuesFrom_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ALLVALUESFROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AllValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAllValuesFrom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ALLVALUESFROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ComplementOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllComplementOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.COMPLEMENTOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ComplementOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllComplementOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.COMPLEMENTOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ComplementOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllComplementOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.COMPLEMENTOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EditorialNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEditorialNote_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EDITORIALNOTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EditorialNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEditorialNote_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EDITORIALNOTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EditorialNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEditorialNote_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EDITORIALNOTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Example' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExample_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EXAMPLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Example' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExample_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EXAMPLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Example' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExample_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EXAMPLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Existentialpropertymapping' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExistentialpropertymapping_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EXISTENTIALPROPERTYMAPPING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Existentialpropertymapping' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExistentialpropertymapping_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EXISTENTIALPROPERTYMAPPING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Existentialpropertymapping' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExistentialpropertymapping_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EXISTENTIALPROPERTYMAPPING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.IMPORTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.IMPORTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Imports' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.IMPORTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Neutralvalue' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNeutralvalue_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.NEUTRALVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Neutralvalue' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNeutralvalue_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.NEUTRALVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Neutralvalue' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNeutralvalue_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.NEUTRALVALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'OnClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOnClass_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ONCLASS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'OnClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOnClass_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ONCLASS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'OnClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOnClass_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ONCLASS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOnProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ONPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOnProperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ONPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOnProperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ONPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'OneOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOneOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ONEOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'OneOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOneOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ONEOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'OneOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOneOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ONEOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Preferredproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreferredproperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PREFERREDPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Preferredproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreferredproperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PREFERREDPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Preferredproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPreferredproperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PREFERREDPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'QualifiedCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllQualifiedCardinality_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.QUALIFIEDCARDINALITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'QualifiedCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllQualifiedCardinality_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.QUALIFIEDCARDINALITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'QualifiedCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllQualifiedCardinality_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.QUALIFIEDCARDINALITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Related' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.RELATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Related' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelated_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.RELATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Related' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRelated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.RELATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Simplificationproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSimplificationproperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SIMPLIFICATIONPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Simplificationproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSimplificationproperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SIMPLIFICATIONPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Simplificationproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSimplificationproperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SIMPLIFICATIONPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SomeValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSomeValuesFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SOMEVALUESFROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SomeValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSomeValuesFrom_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SOMEVALUESFROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SomeValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSomeValuesFrom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SOMEVALUESFROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Somehowrelatedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSomehowrelatedto_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SOMEHOWRELATEDTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Somehowrelatedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSomehowrelatedto_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SOMEHOWRELATEDTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Somehowrelatedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSomehowrelatedto_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SOMEHOWRELATEDTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Submappingrelationproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubmappingrelationproperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SUBMAPPINGRELATIONPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Submappingrelationproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubmappingrelationproperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SUBMAPPINGRELATIONPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Submappingrelationproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSubmappingrelationproperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SUBMAPPINGRELATIONPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Targetvaluecycle' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvaluecycle_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TARGETVALUECYCLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Targetvaluecycle' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvaluecycle_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TARGETVALUECYCLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Targetvaluecycle' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTargetvaluecycle_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TARGETVALUECYCLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Targetvaluelist' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvaluelist_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TARGETVALUELIST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Targetvaluelist' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvaluelist_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TARGETVALUELIST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Targetvaluelist' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTargetvaluelist_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TARGETVALUELIST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Targetvalueorderedset' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvalueorderedset_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TARGETVALUEORDEREDSET, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Targetvalueorderedset' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvalueorderedset_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TARGETVALUEORDEREDSET, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Targetvalueorderedset' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTargetvalueorderedset_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TARGETVALUEORDEREDSET, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Targetvalueset' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvalueset_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TARGETVALUESET, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Targetvalueset' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargetvalueset_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TARGETVALUESET, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Targetvalueset' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTargetvalueset_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TARGETVALUESET, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Termstatus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermstatus_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TERMSTATUS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Termstatus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermstatus_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TERMSTATUS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Termstatus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermstatus_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TERMSTATUS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUnionOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.UNIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUnionOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.UNIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUnionOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.UNIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Uripseudoproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUripseudoproperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.URIPSEUDOPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Uripseudoproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUripseudoproperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.URIPSEUDOPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Uripseudoproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUripseudoproperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.URIPSEUDOPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sourcevaluesoutofbounds' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourcevaluesoutofbounds_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, PropertyMapping.SOURCEVALUESOUTOFBOUNDS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sourcevaluesoutofbounds' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourcevaluesoutofbounds_Inverse() {
		return Base.getAll_Inverse(this.model, PropertyMapping.SOURCEVALUESOUTOFBOUNDS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sourcevaluesoutofbounds' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSourcevaluesoutofbounds_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, PropertyMapping.SOURCEVALUESOUTOFBOUNDS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sub_graphic' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSub_graphic_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, PropertyMapping.SUB_GRAPHIC, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sub_graphic' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSub_graphic_Inverse() {
		return Base.getAll_Inverse(this.model, PropertyMapping.SUB_GRAPHIC, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sub_graphic' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSub_graphic_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, PropertyMapping.SUB_GRAPHIC, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Similarproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSimilarproperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Unifywithinverseandpickone.SIMILARPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Similarproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSimilarproperty_Inverse() {
		return Base.getAll_Inverse(this.model, Unifywithinverseandpickone.SIMILARPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Similarproperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSimilarproperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Unifywithinverseandpickone.SIMILARPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Drawinterpolated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrawinterpolated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Property_to_Graphic_AttributeMapping.DRAWINTERPOLATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Drawinterpolated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrawinterpolated_Inverse() {
		return Base.getAll_Inverse(this.model, Property_to_Graphic_AttributeMapping.DRAWINTERPOLATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Drawinterpolated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDrawinterpolated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Property_to_Graphic_AttributeMapping.DRAWINTERPOLATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Inheritedby' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInheritedby_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, A_0.INHERITEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Inheritedby' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInheritedby_Inverse() {
		return Base.getAll_Inverse(this.model, A_0.INHERITEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Inheritedby' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInheritedby_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, A_0.INHERITEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Passedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPassedto_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, A_0.PASSEDTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Passedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPassedto_Inverse() {
		return Base.getAll_Inverse(this.model, A_0.PASSEDTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Passedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPassedto_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, A_0.PASSEDTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Lowerboundexclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLowerboundexclusive_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Interval.LOWERBOUNDEXCLUSIVE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Lowerboundexclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLowerboundexclusive_Inverse() {
		return Base.getAll_Inverse(this.model, Interval.LOWERBOUNDEXCLUSIVE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Lowerboundexclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLowerboundexclusive_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Interval.LOWERBOUNDEXCLUSIVE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Lowerboundinclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLowerboundinclusive_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Interval.LOWERBOUNDINCLUSIVE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Lowerboundinclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLowerboundinclusive_Inverse() {
		return Base.getAll_Inverse(this.model, Interval.LOWERBOUNDINCLUSIVE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Lowerboundinclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLowerboundinclusive_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Interval.LOWERBOUNDINCLUSIVE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Upperboundexclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUpperboundexclusive_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Interval.UPPERBOUNDEXCLUSIVE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Upperboundexclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUpperboundexclusive_Inverse() {
		return Base.getAll_Inverse(this.model, Interval.UPPERBOUNDEXCLUSIVE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Upperboundexclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUpperboundexclusive_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Interval.UPPERBOUNDEXCLUSIVE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Upperboundinclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUpperboundinclusive_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Interval.UPPERBOUNDINCLUSIVE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Upperboundinclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUpperboundinclusive_Inverse() {
		return Base.getAll_Inverse(this.model, Interval.UPPERBOUNDINCLUSIVE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Upperboundinclusive' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUpperboundinclusive_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Interval.UPPERBOUNDINCLUSIVE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27419f3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALLVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27419f3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAllValuesFrom() {
		return Base.has(this.model, this.getResource(), ALLVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27419f3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALLVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27419f3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAllValuesFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALLVALUESFROM);
	}

     /**
     * Get all values of property AllValuesFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ALLVALUESFROM);
	}
	
    /**
     * Get all values of property AllValuesFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALLVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AllValuesFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ALLVALUESFROM);
	}

    /**
     * Get all values of property AllValuesFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ALLVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AllValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ALLVALUESFROM, Thing.class);
	}
	
    /**
     * Get all values of property AllValuesFrom as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAllValuesFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALLVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property AllValuesFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAllValuesFrom() {
		return Base.getAll(this.model, this.getResource(), ALLVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property AllValuesFrom as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAllValuesFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), ALLVALUESFROM, Thing.class);
	}
 
    /**
     * Adds a value to property AllValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Adds a value to property AllValuesFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAllValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ALLVALUESFROM, value);
	}
    /**
     * Adds a value to property AllValuesFrom from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Adds a value to property AllValuesFrom from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAllValuesFrom(Thing value) {
		Base.add(this.model, this.getResource(), ALLVALUESFROM, value);
	}
  

    /**
     * Sets a value of property AllValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Sets a value of property AllValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAllValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALLVALUESFROM, value);
	}
    /**
     * Sets a value of property AllValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Sets a value of property AllValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAllValuesFrom(Thing value) {
		Base.set(this.model, this.getResource(), ALLVALUESFROM, value);
	}
  


    /**
     * Removes a value of property AllValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Removes a value of property AllValuesFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAllValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALLVALUESFROM, value);
	}
    /**
     * Removes a value of property AllValuesFrom given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Removes a value of property AllValuesFrom given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAllValuesFrom(Thing value) {
		Base.remove(this.model, this.getResource(), ALLVALUESFROM, value);
	}
  
    /**
     * Removes all values of property AllValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALLVALUESFROM);
	}
	
    /**
     * Removes all values of property AllValuesFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAllValuesFrom() {
		Base.removeAll(this.model, this.getResource(), ALLVALUESFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@657f6649 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMPLEMENTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@657f6649 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasComplementOf() {
		return Base.has(this.model, this.getResource(), COMPLEMENTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@657f6649 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMPLEMENTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@657f6649 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasComplementOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMPLEMENTOF);
	}

     /**
     * Get all values of property ComplementOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComplementOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMPLEMENTOF);
	}
	
    /**
     * Get all values of property ComplementOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComplementOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPLEMENTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ComplementOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComplementOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMPLEMENTOF);
	}

    /**
     * Get all values of property ComplementOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComplementOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMPLEMENTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ComplementOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMPLEMENTOF, Thing.class);
	}
	
    /**
     * Get all values of property ComplementOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllComplementOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPLEMENTOF, Thing.class);
	}

    /**
     * Get all values of property ComplementOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllComplementOf() {
		return Base.getAll(this.model, this.getResource(), COMPLEMENTOF, Thing.class);
	}

    /**
     * Get all values of property ComplementOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllComplementOf_as() {
		return Base.getAll_as(this.model, this.getResource(), COMPLEMENTOF, Thing.class);
	}
 
    /**
     * Adds a value to property ComplementOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addComplementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Adds a value to property ComplementOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addComplementOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMPLEMENTOF, value);
	}
    /**
     * Adds a value to property ComplementOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Adds a value to property ComplementOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addComplementOf(Thing value) {
		Base.add(this.model, this.getResource(), COMPLEMENTOF, value);
	}
  

    /**
     * Sets a value of property ComplementOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setComplementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Sets a value of property ComplementOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setComplementOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMPLEMENTOF, value);
	}
    /**
     * Sets a value of property ComplementOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Sets a value of property ComplementOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setComplementOf(Thing value) {
		Base.set(this.model, this.getResource(), COMPLEMENTOF, value);
	}
  


    /**
     * Removes a value of property ComplementOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeComplementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Removes a value of property ComplementOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeComplementOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMPLEMENTOF, value);
	}
    /**
     * Removes a value of property ComplementOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeComplementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, COMPLEMENTOF, value);
	}
	
    /**
     * Removes a value of property ComplementOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeComplementOf(Thing value) {
		Base.remove(this.model, this.getResource(), COMPLEMENTOF, value);
	}
  
    /**
     * Removes all values of property ComplementOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllComplementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMPLEMENTOF);
	}
	
    /**
     * Removes all values of property ComplementOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllComplementOf() {
		Base.removeAll(this.model, this.getResource(), COMPLEMENTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21e513fb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21e513fb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDescription() {
		return Base.has(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21e513fb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21e513fb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DESCRIPTION);
	}

     /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DESCRIPTION, Thing.class);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDescription() {
		return Base.getAll(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}
 
    /**
     * Adds a value to property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Adds a value to property Description from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDescription(Thing value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
  

    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDescription(Thing value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
  


    /**
     * Removes a value of property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Removes a value of property Description given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDescription(Thing value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
  
    /**
     * Removes all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Removes all values of property Description	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDescription() {
		Base.removeAll(this.model, this.getResource(), DESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53e2835b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EDITORIALNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53e2835b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEditorialNote() {
		return Base.has(this.model, this.getResource(), EDITORIALNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53e2835b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EDITORIALNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53e2835b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEditorialNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EDITORIALNOTE);
	}

     /**
     * Get all values of property EditorialNote as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEditorialNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EDITORIALNOTE);
	}
	
    /**
     * Get all values of property EditorialNote as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEditorialNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITORIALNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EditorialNote as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEditorialNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EDITORIALNOTE);
	}

    /**
     * Get all values of property EditorialNote as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEditorialNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EDITORIALNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EditorialNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EDITORIALNOTE, Thing.class);
	}
	
    /**
     * Get all values of property EditorialNote as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllEditorialNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITORIALNOTE, Thing.class);
	}

    /**
     * Get all values of property EditorialNote     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllEditorialNote() {
		return Base.getAll(this.model, this.getResource(), EDITORIALNOTE, Thing.class);
	}

    /**
     * Get all values of property EditorialNote as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllEditorialNote_as() {
		return Base.getAll_as(this.model, this.getResource(), EDITORIALNOTE, Thing.class);
	}
 
    /**
     * Adds a value to property EditorialNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Adds a value to property EditorialNote as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEditorialNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EDITORIALNOTE, value);
	}
    /**
     * Adds a value to property EditorialNote from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Adds a value to property EditorialNote from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEditorialNote(Thing value) {
		Base.add(this.model, this.getResource(), EDITORIALNOTE, value);
	}
  

    /**
     * Sets a value of property EditorialNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Sets a value of property EditorialNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEditorialNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EDITORIALNOTE, value);
	}
    /**
     * Sets a value of property EditorialNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Sets a value of property EditorialNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEditorialNote(Thing value) {
		Base.set(this.model, this.getResource(), EDITORIALNOTE, value);
	}
  


    /**
     * Removes a value of property EditorialNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Removes a value of property EditorialNote as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEditorialNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EDITORIALNOTE, value);
	}
    /**
     * Removes a value of property EditorialNote given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Removes a value of property EditorialNote given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEditorialNote(Thing value) {
		Base.remove(this.model, this.getResource(), EDITORIALNOTE, value);
	}
  
    /**
     * Removes all values of property EditorialNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EDITORIALNOTE);
	}
	
    /**
     * Removes all values of property EditorialNote	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEditorialNote() {
		Base.removeAll(this.model, this.getResource(), EDITORIALNOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e5faf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e5faf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExample() {
		return Base.has(this.model, this.getResource(), EXAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e5faf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e5faf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExample( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXAMPLE);
	}

     /**
     * Get all values of property Example as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExample_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXAMPLE);
	}
	
    /**
     * Get all values of property Example as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExample_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Example as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExample_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXAMPLE);
	}

    /**
     * Get all values of property Example as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExample_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Example     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXAMPLE, Thing.class);
	}
	
    /**
     * Get all values of property Example as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllExample_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXAMPLE, Thing.class);
	}

    /**
     * Get all values of property Example     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllExample() {
		return Base.getAll(this.model, this.getResource(), EXAMPLE, Thing.class);
	}

    /**
     * Get all values of property Example as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllExample_as() {
		return Base.getAll_as(this.model, this.getResource(), EXAMPLE, Thing.class);
	}
 
    /**
     * Adds a value to property Example as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Adds a value to property Example as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExample( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXAMPLE, value);
	}
    /**
     * Adds a value to property Example from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Adds a value to property Example from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExample(Thing value) {
		Base.add(this.model, this.getResource(), EXAMPLE, value);
	}
  

    /**
     * Sets a value of property Example from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Sets a value of property Example from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExample( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXAMPLE, value);
	}
    /**
     * Sets a value of property Example from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Sets a value of property Example from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExample(Thing value) {
		Base.set(this.model, this.getResource(), EXAMPLE, value);
	}
  


    /**
     * Removes a value of property Example as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Removes a value of property Example as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExample( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXAMPLE, value);
	}
    /**
     * Removes a value of property Example given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EXAMPLE, value);
	}
	
    /**
     * Removes a value of property Example given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExample(Thing value) {
		Base.remove(this.model, this.getResource(), EXAMPLE, value);
	}
  
    /**
     * Removes all values of property Example     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXAMPLE);
	}
	
    /**
     * Removes all values of property Example	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExample() {
		Base.removeAll(this.model, this.getResource(), EXAMPLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69ea9700 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExistentialpropertymapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXISTENTIALPROPERTYMAPPING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69ea9700 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExistentialpropertymapping() {
		return Base.has(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69ea9700 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExistentialpropertymapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXISTENTIALPROPERTYMAPPING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69ea9700 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExistentialpropertymapping( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING);
	}

     /**
     * Get all values of property Existentialpropertymapping as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExistentialpropertymapping_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXISTENTIALPROPERTYMAPPING);
	}
	
    /**
     * Get all values of property Existentialpropertymapping as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExistentialpropertymapping_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXISTENTIALPROPERTYMAPPING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Existentialpropertymapping as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExistentialpropertymapping_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING);
	}

    /**
     * Get all values of property Existentialpropertymapping as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExistentialpropertymapping_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Existentialpropertymapping     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllExistentialpropertymapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXISTENTIALPROPERTYMAPPING, Thing.class);
	}
	
    /**
     * Get all values of property Existentialpropertymapping as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllExistentialpropertymapping_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXISTENTIALPROPERTYMAPPING, Thing.class);
	}

    /**
     * Get all values of property Existentialpropertymapping     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllExistentialpropertymapping() {
		return Base.getAll(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, Thing.class);
	}

    /**
     * Get all values of property Existentialpropertymapping as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllExistentialpropertymapping_as() {
		return Base.getAll_as(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, Thing.class);
	}
 
    /**
     * Adds a value to property Existentialpropertymapping as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExistentialpropertymapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}
	
    /**
     * Adds a value to property Existentialpropertymapping as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExistentialpropertymapping( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
    /**
     * Adds a value to property Existentialpropertymapping from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExistentialpropertymapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}
	
    /**
     * Adds a value to property Existentialpropertymapping from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExistentialpropertymapping(Thing value) {
		Base.add(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
  

    /**
     * Sets a value of property Existentialpropertymapping from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExistentialpropertymapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}
	
    /**
     * Sets a value of property Existentialpropertymapping from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExistentialpropertymapping( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
    /**
     * Sets a value of property Existentialpropertymapping from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExistentialpropertymapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}
	
    /**
     * Sets a value of property Existentialpropertymapping from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExistentialpropertymapping(Thing value) {
		Base.set(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
  


    /**
     * Removes a value of property Existentialpropertymapping as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExistentialpropertymapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}
	
    /**
     * Removes a value of property Existentialpropertymapping as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExistentialpropertymapping( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
    /**
     * Removes a value of property Existentialpropertymapping given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExistentialpropertymapping(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EXISTENTIALPROPERTYMAPPING, value);
	}
	
    /**
     * Removes a value of property Existentialpropertymapping given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExistentialpropertymapping(Thing value) {
		Base.remove(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING, value);
	}
  
    /**
     * Removes all values of property Existentialpropertymapping     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExistentialpropertymapping( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXISTENTIALPROPERTYMAPPING);
	}
	
    /**
     * Removes all values of property Existentialpropertymapping	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExistentialpropertymapping() {
		Base.removeAll(this.model, this.getResource(), EXISTENTIALPROPERTYMAPPING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@273f5150 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@273f5150 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImports() {
		return Base.has(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@273f5150 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@273f5150 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImports( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMPORTS);
	}

     /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMPORTS);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMPORTS, Thing.class);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllImports_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, Thing.class);
	}

    /**
     * Get all values of property Imports     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllImports() {
		return Base.getAll(this.model, this.getResource(), IMPORTS, Thing.class);
	}

    /**
     * Get all values of property Imports as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllImports_as() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, Thing.class);
	}
 
    /**
     * Adds a value to property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Adds a value to property Imports from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImports(Thing value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
  

    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Sets a value of property Imports from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImports(Thing value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
  


    /**
     * Removes a value of property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Removes a value of property Imports given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImports(Thing value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
  
    /**
     * Removes all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMPORTS);
	}
	
    /**
     * Removes all values of property Imports	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImports() {
		Base.removeAll(this.model, this.getResource(), IMPORTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNeutralvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEUTRALVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNeutralvalue() {
		return Base.has(this.model, this.getResource(), NEUTRALVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNeutralvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEUTRALVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNeutralvalue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEUTRALVALUE);
	}

     /**
     * Get all values of property Neutralvalue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNeutralvalue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NEUTRALVALUE);
	}
	
    /**
     * Get all values of property Neutralvalue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNeutralvalue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEUTRALVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Neutralvalue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNeutralvalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEUTRALVALUE);
	}

    /**
     * Get all values of property Neutralvalue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNeutralvalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEUTRALVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Neutralvalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllNeutralvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NEUTRALVALUE, Thing.class);
	}
	
    /**
     * Get all values of property Neutralvalue as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllNeutralvalue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEUTRALVALUE, Thing.class);
	}

    /**
     * Get all values of property Neutralvalue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllNeutralvalue() {
		return Base.getAll(this.model, this.getResource(), NEUTRALVALUE, Thing.class);
	}

    /**
     * Get all values of property Neutralvalue as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllNeutralvalue_as() {
		return Base.getAll_as(this.model, this.getResource(), NEUTRALVALUE, Thing.class);
	}
 
    /**
     * Adds a value to property Neutralvalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNeutralvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NEUTRALVALUE, value);
	}
	
    /**
     * Adds a value to property Neutralvalue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNeutralvalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NEUTRALVALUE, value);
	}
    /**
     * Adds a value to property Neutralvalue from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNeutralvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, NEUTRALVALUE, value);
	}
	
    /**
     * Adds a value to property Neutralvalue from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNeutralvalue(Thing value) {
		Base.add(this.model, this.getResource(), NEUTRALVALUE, value);
	}
  

    /**
     * Sets a value of property Neutralvalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNeutralvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEUTRALVALUE, value);
	}
	
    /**
     * Sets a value of property Neutralvalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNeutralvalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEUTRALVALUE, value);
	}
    /**
     * Sets a value of property Neutralvalue from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNeutralvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, NEUTRALVALUE, value);
	}
	
    /**
     * Sets a value of property Neutralvalue from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNeutralvalue(Thing value) {
		Base.set(this.model, this.getResource(), NEUTRALVALUE, value);
	}
  


    /**
     * Removes a value of property Neutralvalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNeutralvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEUTRALVALUE, value);
	}
	
    /**
     * Removes a value of property Neutralvalue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNeutralvalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEUTRALVALUE, value);
	}
    /**
     * Removes a value of property Neutralvalue given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNeutralvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, NEUTRALVALUE, value);
	}
	
    /**
     * Removes a value of property Neutralvalue given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNeutralvalue(Thing value) {
		Base.remove(this.model, this.getResource(), NEUTRALVALUE, value);
	}
  
    /**
     * Removes all values of property Neutralvalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNeutralvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEUTRALVALUE);
	}
	
    /**
     * Removes all values of property Neutralvalue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNeutralvalue() {
		Base.removeAll(this.model, this.getResource(), NEUTRALVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10cc5c7b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOnClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ONCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10cc5c7b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOnClass() {
		return Base.has(this.model, this.getResource(), ONCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10cc5c7b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOnClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ONCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10cc5c7b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOnClass( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ONCLASS);
	}

     /**
     * Get all values of property OnClass as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnClass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ONCLASS);
	}
	
    /**
     * Get all values of property OnClass as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOnClass_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OnClass as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnClass_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ONCLASS);
	}

    /**
     * Get all values of property OnClass as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOnClass_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ONCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OnClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllOnClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONCLASS, Thing.class);
	}
	
    /**
     * Get all values of property OnClass as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllOnClass_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONCLASS, Thing.class);
	}

    /**
     * Get all values of property OnClass     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllOnClass() {
		return Base.getAll(this.model, this.getResource(), ONCLASS, Thing.class);
	}

    /**
     * Get all values of property OnClass as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllOnClass_as() {
		return Base.getAll_as(this.model, this.getResource(), ONCLASS, Thing.class);
	}
 
    /**
     * Adds a value to property OnClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOnClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONCLASS, value);
	}
	
    /**
     * Adds a value to property OnClass as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOnClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONCLASS, value);
	}
    /**
     * Adds a value to property OnClass from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOnClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ONCLASS, value);
	}
	
    /**
     * Adds a value to property OnClass from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOnClass(Thing value) {
		Base.add(this.model, this.getResource(), ONCLASS, value);
	}
  

    /**
     * Sets a value of property OnClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOnClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONCLASS, value);
	}
	
    /**
     * Sets a value of property OnClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOnClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONCLASS, value);
	}
    /**
     * Sets a value of property OnClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOnClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ONCLASS, value);
	}
	
    /**
     * Sets a value of property OnClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOnClass(Thing value) {
		Base.set(this.model, this.getResource(), ONCLASS, value);
	}
  


    /**
     * Removes a value of property OnClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOnClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONCLASS, value);
	}
	
    /**
     * Removes a value of property OnClass as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOnClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONCLASS, value);
	}
    /**
     * Removes a value of property OnClass given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOnClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ONCLASS, value);
	}
	
    /**
     * Removes a value of property OnClass given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOnClass(Thing value) {
		Base.remove(this.model, this.getResource(), ONCLASS, value);
	}
  
    /**
     * Removes all values of property OnClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOnClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONCLASS);
	}
	
    /**
     * Removes all values of property OnClass	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOnClass() {
		Base.removeAll(this.model, this.getResource(), ONCLASS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22174e14 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22174e14 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOnProperty() {
		return Base.has(this.model, this.getResource(), ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22174e14 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22174e14 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOnProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ONPROPERTY);
	}

     /**
     * Get all values of property OnProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ONPROPERTY);
	}
	
    /**
     * Get all values of property OnProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OnProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ONPROPERTY);
	}

    /**
     * Get all values of property OnProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OnProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property OnProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllOnProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property OnProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllOnProperty() {
		return Base.getAll(this.model, this.getResource(), ONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property OnProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllOnProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), ONPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property OnProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Adds a value to property OnProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Adds a value to property OnProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Adds a value to property OnProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOnProperty(Thing value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}
  

    /**
     * Sets a value of property OnProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Sets a value of property OnProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Sets a value of property OnProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Sets a value of property OnProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOnProperty(Thing value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}
  


    /**
     * Removes a value of property OnProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Removes a value of property OnProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Removes a value of property OnProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Removes a value of property OnProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOnProperty(Thing value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}
  
    /**
     * Removes all values of property OnProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONPROPERTY);
	}
	
    /**
     * Removes all values of property OnProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOnProperty() {
		Base.removeAll(this.model, this.getResource(), ONPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@145650eb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ONEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@145650eb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOneOf() {
		return Base.has(this.model, this.getResource(), ONEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@145650eb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ONEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@145650eb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOneOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ONEOF);
	}

     /**
     * Get all values of property OneOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOneOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ONEOF);
	}
	
    /**
     * Get all values of property OneOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOneOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONEOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OneOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOneOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ONEOF);
	}

    /**
     * Get all values of property OneOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOneOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ONEOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OneOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONEOF, Thing.class);
	}
	
    /**
     * Get all values of property OneOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllOneOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONEOF, Thing.class);
	}

    /**
     * Get all values of property OneOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllOneOf() {
		return Base.getAll(this.model, this.getResource(), ONEOF, Thing.class);
	}

    /**
     * Get all values of property OneOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllOneOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ONEOF, Thing.class);
	}
 
    /**
     * Adds a value to property OneOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOneOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Adds a value to property OneOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOneOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONEOF, value);
	}
    /**
     * Adds a value to property OneOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Adds a value to property OneOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOneOf(Thing value) {
		Base.add(this.model, this.getResource(), ONEOF, value);
	}
  

    /**
     * Sets a value of property OneOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOneOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Sets a value of property OneOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOneOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONEOF, value);
	}
    /**
     * Sets a value of property OneOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Sets a value of property OneOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOneOf(Thing value) {
		Base.set(this.model, this.getResource(), ONEOF, value);
	}
  


    /**
     * Removes a value of property OneOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOneOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Removes a value of property OneOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOneOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONEOF, value);
	}
    /**
     * Removes a value of property OneOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOneOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ONEOF, value);
	}
	
    /**
     * Removes a value of property OneOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOneOf(Thing value) {
		Base.remove(this.model, this.getResource(), ONEOF, value);
	}
  
    /**
     * Removes all values of property OneOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOneOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONEOF);
	}
	
    /**
     * Removes all values of property OneOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOneOf() {
		Base.removeAll(this.model, this.getResource(), ONEOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21ed510d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPreferredproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREFERREDPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21ed510d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPreferredproperty() {
		return Base.has(this.model, this.getResource(), PREFERREDPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21ed510d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPreferredproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREFERREDPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21ed510d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPreferredproperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREFERREDPROPERTY);
	}

     /**
     * Get all values of property Preferredproperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreferredproperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREFERREDPROPERTY);
	}
	
    /**
     * Get all values of property Preferredproperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPreferredproperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFERREDPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Preferredproperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreferredproperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREFERREDPROPERTY);
	}

    /**
     * Get all values of property Preferredproperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPreferredproperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREFERREDPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Preferredproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPreferredproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREFERREDPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property Preferredproperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPreferredproperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFERREDPROPERTY, Thing.class);
	}

    /**
     * Get all values of property Preferredproperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPreferredproperty() {
		return Base.getAll(this.model, this.getResource(), PREFERREDPROPERTY, Thing.class);
	}

    /**
     * Get all values of property Preferredproperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPreferredproperty_as() {
		return Base.getAll_as(this.model, this.getResource(), PREFERREDPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property Preferredproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPreferredproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PREFERREDPROPERTY, value);
	}
	
    /**
     * Adds a value to property Preferredproperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPreferredproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
    /**
     * Adds a value to property Preferredproperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPreferredproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PREFERREDPROPERTY, value);
	}
	
    /**
     * Adds a value to property Preferredproperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPreferredproperty(Thing value) {
		Base.add(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
  

    /**
     * Sets a value of property Preferredproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPreferredproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREFERREDPROPERTY, value);
	}
	
    /**
     * Sets a value of property Preferredproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPreferredproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
    /**
     * Sets a value of property Preferredproperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPreferredproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PREFERREDPROPERTY, value);
	}
	
    /**
     * Sets a value of property Preferredproperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPreferredproperty(Thing value) {
		Base.set(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
  


    /**
     * Removes a value of property Preferredproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePreferredproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREFERREDPROPERTY, value);
	}
	
    /**
     * Removes a value of property Preferredproperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePreferredproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
    /**
     * Removes a value of property Preferredproperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePreferredproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PREFERREDPROPERTY, value);
	}
	
    /**
     * Removes a value of property Preferredproperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePreferredproperty(Thing value) {
		Base.remove(this.model, this.getResource(), PREFERREDPROPERTY, value);
	}
  
    /**
     * Removes all values of property Preferredproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPreferredproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREFERREDPROPERTY);
	}
	
    /**
     * Removes all values of property Preferredproperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPreferredproperty() {
		Base.removeAll(this.model, this.getResource(), PREFERREDPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25303e3b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25303e3b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedCardinality() {
		return Base.has(this.model, this.getResource(), QUALIFIEDCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25303e3b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25303e3b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDCARDINALITY);
	}

     /**
     * Get all values of property QualifiedCardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDCARDINALITY);
	}
	
    /**
     * Get all values of property QualifiedCardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedCardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDCARDINALITY);
	}

    /**
     * Get all values of property QualifiedCardinality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllQualifiedCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDCARDINALITY, Thing.class);
	}
	
    /**
     * Get all values of property QualifiedCardinality as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllQualifiedCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property QualifiedCardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllQualifiedCardinality() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property QualifiedCardinality as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllQualifiedCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDCARDINALITY, Thing.class);
	}
 
    /**
     * Adds a value to property QualifiedCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDCARDINALITY, value);
	}
	
    /**
     * Adds a value to property QualifiedCardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDCARDINALITY, value);
	}
    /**
     * Adds a value to property QualifiedCardinality from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, QUALIFIEDCARDINALITY, value);
	}
	
    /**
     * Adds a value to property QualifiedCardinality from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedCardinality(Thing value) {
		Base.add(this.model, this.getResource(), QUALIFIEDCARDINALITY, value);
	}
  

    /**
     * Sets a value of property QualifiedCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDCARDINALITY, value);
	}
	
    /**
     * Sets a value of property QualifiedCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDCARDINALITY, value);
	}
    /**
     * Sets a value of property QualifiedCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, QUALIFIEDCARDINALITY, value);
	}
	
    /**
     * Sets a value of property QualifiedCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedCardinality(Thing value) {
		Base.set(this.model, this.getResource(), QUALIFIEDCARDINALITY, value);
	}
  


    /**
     * Removes a value of property QualifiedCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDCARDINALITY, value);
	}
	
    /**
     * Removes a value of property QualifiedCardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDCARDINALITY, value);
	}
    /**
     * Removes a value of property QualifiedCardinality given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, QUALIFIEDCARDINALITY, value);
	}
	
    /**
     * Removes a value of property QualifiedCardinality given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedCardinality(Thing value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDCARDINALITY, value);
	}
  
    /**
     * Removes all values of property QualifiedCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDCARDINALITY);
	}
	
    /**
     * Removes all values of property QualifiedCardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedCardinality() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDCARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744611ae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744611ae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelated() {
		return Base.has(this.model, this.getResource(), RELATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744611ae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744611ae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATED);
	}

     /**
     * Get all values of property Related as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATED);
	}
	
    /**
     * Get all values of property Related as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Related as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATED);
	}

    /**
     * Get all values of property Related as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Related     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATED, Thing.class);
	}
	
    /**
     * Get all values of property Related as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllRelated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATED, Thing.class);
	}

    /**
     * Get all values of property Related     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllRelated() {
		return Base.getAll(this.model, this.getResource(), RELATED, Thing.class);
	}

    /**
     * Get all values of property Related as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllRelated_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATED, Thing.class);
	}
 
    /**
     * Adds a value to property Related as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATED, value);
	}
	
    /**
     * Adds a value to property Related as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATED, value);
	}
    /**
     * Adds a value to property Related from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, RELATED, value);
	}
	
    /**
     * Adds a value to property Related from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelated(Thing value) {
		Base.add(this.model, this.getResource(), RELATED, value);
	}
  

    /**
     * Sets a value of property Related from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATED, value);
	}
	
    /**
     * Sets a value of property Related from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATED, value);
	}
    /**
     * Sets a value of property Related from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, RELATED, value);
	}
	
    /**
     * Sets a value of property Related from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelated(Thing value) {
		Base.set(this.model, this.getResource(), RELATED, value);
	}
  


    /**
     * Removes a value of property Related as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATED, value);
	}
	
    /**
     * Removes a value of property Related as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATED, value);
	}
    /**
     * Removes a value of property Related given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, RELATED, value);
	}
	
    /**
     * Removes a value of property Related given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelated(Thing value) {
		Base.remove(this.model, this.getResource(), RELATED, value);
	}
  
    /**
     * Removes all values of property Related     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATED);
	}
	
    /**
     * Removes all values of property Related	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelated() {
		Base.removeAll(this.model, this.getResource(), RELATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@591913b3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSimplificationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SIMPLIFICATIONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@591913b3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSimplificationproperty() {
		return Base.has(this.model, this.getResource(), SIMPLIFICATIONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@591913b3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSimplificationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SIMPLIFICATIONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@591913b3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSimplificationproperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SIMPLIFICATIONPROPERTY);
	}

     /**
     * Get all values of property Simplificationproperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSimplificationproperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SIMPLIFICATIONPROPERTY);
	}
	
    /**
     * Get all values of property Simplificationproperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSimplificationproperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIMPLIFICATIONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Simplificationproperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSimplificationproperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SIMPLIFICATIONPROPERTY);
	}

    /**
     * Get all values of property Simplificationproperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSimplificationproperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SIMPLIFICATIONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Simplificationproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSimplificationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SIMPLIFICATIONPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property Simplificationproperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSimplificationproperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIMPLIFICATIONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property Simplificationproperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSimplificationproperty() {
		return Base.getAll(this.model, this.getResource(), SIMPLIFICATIONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property Simplificationproperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSimplificationproperty_as() {
		return Base.getAll_as(this.model, this.getResource(), SIMPLIFICATIONPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property Simplificationproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSimplificationproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SIMPLIFICATIONPROPERTY, value);
	}
	
    /**
     * Adds a value to property Simplificationproperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSimplificationproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SIMPLIFICATIONPROPERTY, value);
	}
    /**
     * Adds a value to property Simplificationproperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSimplificationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SIMPLIFICATIONPROPERTY, value);
	}
	
    /**
     * Adds a value to property Simplificationproperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSimplificationproperty(Thing value) {
		Base.add(this.model, this.getResource(), SIMPLIFICATIONPROPERTY, value);
	}
  

    /**
     * Sets a value of property Simplificationproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSimplificationproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SIMPLIFICATIONPROPERTY, value);
	}
	
    /**
     * Sets a value of property Simplificationproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSimplificationproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SIMPLIFICATIONPROPERTY, value);
	}
    /**
     * Sets a value of property Simplificationproperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSimplificationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SIMPLIFICATIONPROPERTY, value);
	}
	
    /**
     * Sets a value of property Simplificationproperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSimplificationproperty(Thing value) {
		Base.set(this.model, this.getResource(), SIMPLIFICATIONPROPERTY, value);
	}
  


    /**
     * Removes a value of property Simplificationproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSimplificationproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SIMPLIFICATIONPROPERTY, value);
	}
	
    /**
     * Removes a value of property Simplificationproperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSimplificationproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SIMPLIFICATIONPROPERTY, value);
	}
    /**
     * Removes a value of property Simplificationproperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSimplificationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SIMPLIFICATIONPROPERTY, value);
	}
	
    /**
     * Removes a value of property Simplificationproperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSimplificationproperty(Thing value) {
		Base.remove(this.model, this.getResource(), SIMPLIFICATIONPROPERTY, value);
	}
  
    /**
     * Removes all values of property Simplificationproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSimplificationproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SIMPLIFICATIONPROPERTY);
	}
	
    /**
     * Removes all values of property Simplificationproperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSimplificationproperty() {
		Base.removeAll(this.model, this.getResource(), SIMPLIFICATIONPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b926d29 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOMEVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b926d29 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSomeValuesFrom() {
		return Base.has(this.model, this.getResource(), SOMEVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b926d29 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOMEVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b926d29 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSomeValuesFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOMEVALUESFROM);
	}

     /**
     * Get all values of property SomeValuesFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOMEVALUESFROM);
	}
	
    /**
     * Get all values of property SomeValuesFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOMEVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SomeValuesFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOMEVALUESFROM);
	}

    /**
     * Get all values of property SomeValuesFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOMEVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SomeValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOMEVALUESFROM, Thing.class);
	}
	
    /**
     * Get all values of property SomeValuesFrom as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSomeValuesFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOMEVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property SomeValuesFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSomeValuesFrom() {
		return Base.getAll(this.model, this.getResource(), SOMEVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property SomeValuesFrom as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSomeValuesFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), SOMEVALUESFROM, Thing.class);
	}
 
    /**
     * Adds a value to property SomeValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSomeValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Adds a value to property SomeValuesFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSomeValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
    /**
     * Adds a value to property SomeValuesFrom from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Adds a value to property SomeValuesFrom from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSomeValuesFrom(Thing value) {
		Base.add(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
  

    /**
     * Sets a value of property SomeValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSomeValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Sets a value of property SomeValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSomeValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
    /**
     * Sets a value of property SomeValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Sets a value of property SomeValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSomeValuesFrom(Thing value) {
		Base.set(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
  


    /**
     * Removes a value of property SomeValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSomeValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Removes a value of property SomeValuesFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSomeValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
    /**
     * Removes a value of property SomeValuesFrom given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Removes a value of property SomeValuesFrom given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSomeValuesFrom(Thing value) {
		Base.remove(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
  
    /**
     * Removes all values of property SomeValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSomeValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOMEVALUESFROM);
	}
	
    /**
     * Removes all values of property SomeValuesFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSomeValuesFrom() {
		Base.removeAll(this.model, this.getResource(), SOMEVALUESFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8bc4a53 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSomehowrelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOMEHOWRELATEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8bc4a53 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSomehowrelatedto() {
		return Base.has(this.model, this.getResource(), SOMEHOWRELATEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8bc4a53 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSomehowrelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOMEHOWRELATEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8bc4a53 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSomehowrelatedto( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOMEHOWRELATEDTO);
	}

     /**
     * Get all values of property Somehowrelatedto as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSomehowrelatedto_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOMEHOWRELATEDTO);
	}
	
    /**
     * Get all values of property Somehowrelatedto as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSomehowrelatedto_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOMEHOWRELATEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Somehowrelatedto as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSomehowrelatedto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOMEHOWRELATEDTO);
	}

    /**
     * Get all values of property Somehowrelatedto as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSomehowrelatedto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOMEHOWRELATEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Somehowrelatedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSomehowrelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOMEHOWRELATEDTO, Thing.class);
	}
	
    /**
     * Get all values of property Somehowrelatedto as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSomehowrelatedto_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOMEHOWRELATEDTO, Thing.class);
	}

    /**
     * Get all values of property Somehowrelatedto     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSomehowrelatedto() {
		return Base.getAll(this.model, this.getResource(), SOMEHOWRELATEDTO, Thing.class);
	}

    /**
     * Get all values of property Somehowrelatedto as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSomehowrelatedto_as() {
		return Base.getAll_as(this.model, this.getResource(), SOMEHOWRELATEDTO, Thing.class);
	}
 
    /**
     * Adds a value to property Somehowrelatedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSomehowrelatedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOMEHOWRELATEDTO, value);
	}
	
    /**
     * Adds a value to property Somehowrelatedto as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSomehowrelatedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOMEHOWRELATEDTO, value);
	}
    /**
     * Adds a value to property Somehowrelatedto from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSomehowrelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SOMEHOWRELATEDTO, value);
	}
	
    /**
     * Adds a value to property Somehowrelatedto from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSomehowrelatedto(Thing value) {
		Base.add(this.model, this.getResource(), SOMEHOWRELATEDTO, value);
	}
  

    /**
     * Sets a value of property Somehowrelatedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSomehowrelatedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOMEHOWRELATEDTO, value);
	}
	
    /**
     * Sets a value of property Somehowrelatedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSomehowrelatedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOMEHOWRELATEDTO, value);
	}
    /**
     * Sets a value of property Somehowrelatedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSomehowrelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SOMEHOWRELATEDTO, value);
	}
	
    /**
     * Sets a value of property Somehowrelatedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSomehowrelatedto(Thing value) {
		Base.set(this.model, this.getResource(), SOMEHOWRELATEDTO, value);
	}
  


    /**
     * Removes a value of property Somehowrelatedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSomehowrelatedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOMEHOWRELATEDTO, value);
	}
	
    /**
     * Removes a value of property Somehowrelatedto as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSomehowrelatedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOMEHOWRELATEDTO, value);
	}
    /**
     * Removes a value of property Somehowrelatedto given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSomehowrelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SOMEHOWRELATEDTO, value);
	}
	
    /**
     * Removes a value of property Somehowrelatedto given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSomehowrelatedto(Thing value) {
		Base.remove(this.model, this.getResource(), SOMEHOWRELATEDTO, value);
	}
  
    /**
     * Removes all values of property Somehowrelatedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSomehowrelatedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOMEHOWRELATEDTO);
	}
	
    /**
     * Removes all values of property Somehowrelatedto	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSomehowrelatedto() {
		Base.removeAll(this.model, this.getResource(), SOMEHOWRELATEDTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43ebf1ca has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubmappingrelationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBMAPPINGRELATIONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43ebf1ca has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubmappingrelationproperty() {
		return Base.has(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43ebf1ca has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubmappingrelationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBMAPPINGRELATIONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43ebf1ca has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubmappingrelationproperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY);
	}

     /**
     * Get all values of property Submappingrelationproperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubmappingrelationproperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBMAPPINGRELATIONPROPERTY);
	}
	
    /**
     * Get all values of property Submappingrelationproperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubmappingrelationproperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBMAPPINGRELATIONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Submappingrelationproperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubmappingrelationproperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY);
	}

    /**
     * Get all values of property Submappingrelationproperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubmappingrelationproperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Submappingrelationproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSubmappingrelationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBMAPPINGRELATIONPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property Submappingrelationproperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSubmappingrelationproperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBMAPPINGRELATIONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property Submappingrelationproperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSubmappingrelationproperty() {
		return Base.getAll(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property Submappingrelationproperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSubmappingrelationproperty_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property Submappingrelationproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubmappingrelationproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBMAPPINGRELATIONPROPERTY, value);
	}
	
    /**
     * Adds a value to property Submappingrelationproperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubmappingrelationproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY, value);
	}
    /**
     * Adds a value to property Submappingrelationproperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubmappingrelationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SUBMAPPINGRELATIONPROPERTY, value);
	}
	
    /**
     * Adds a value to property Submappingrelationproperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubmappingrelationproperty(Thing value) {
		Base.add(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY, value);
	}
  

    /**
     * Sets a value of property Submappingrelationproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubmappingrelationproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBMAPPINGRELATIONPROPERTY, value);
	}
	
    /**
     * Sets a value of property Submappingrelationproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubmappingrelationproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY, value);
	}
    /**
     * Sets a value of property Submappingrelationproperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubmappingrelationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SUBMAPPINGRELATIONPROPERTY, value);
	}
	
    /**
     * Sets a value of property Submappingrelationproperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubmappingrelationproperty(Thing value) {
		Base.set(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY, value);
	}
  


    /**
     * Removes a value of property Submappingrelationproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubmappingrelationproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBMAPPINGRELATIONPROPERTY, value);
	}
	
    /**
     * Removes a value of property Submappingrelationproperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubmappingrelationproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY, value);
	}
    /**
     * Removes a value of property Submappingrelationproperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubmappingrelationproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SUBMAPPINGRELATIONPROPERTY, value);
	}
	
    /**
     * Removes a value of property Submappingrelationproperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubmappingrelationproperty(Thing value) {
		Base.remove(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY, value);
	}
  
    /**
     * Removes all values of property Submappingrelationproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubmappingrelationproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBMAPPINGRELATIONPROPERTY);
	}
	
    /**
     * Removes all values of property Submappingrelationproperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubmappingrelationproperty() {
		Base.removeAll(this.model, this.getResource(), SUBMAPPINGRELATIONPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4ed78fd5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4ed78fd5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetvalue() {
		return Base.has(this.model, this.getResource(), TARGETVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4ed78fd5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4ed78fd5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetvalue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUE);
	}

     /**
     * Get all values of property Targetvalue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUE);
	}
	
    /**
     * Get all values of property Targetvalue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Targetvalue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUE);
	}

    /**
     * Get all values of property Targetvalue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Targetvalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllTargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUE, A_0.class);
	}
	
    /**
     * Get all values of property Targetvalue as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllTargetvalue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUE, A_0.class);
	}

    /**
     * Get all values of property Targetvalue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllTargetvalue() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUE, A_0.class);
	}

    /**
     * Get all values of property Targetvalue as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllTargetvalue_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUE, A_0.class);
	}
 
    /**
     * Adds a value to property Targetvalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTargetvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TARGETVALUE, value);
	}
	
    /**
     * Adds a value to property Targetvalue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTargetvalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Adds a value to property Targetvalue from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, TARGETVALUE, value);
	}
	
    /**
     * Adds a value to property Targetvalue from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTargetvalue(A_0 value) {
		Base.add(this.model, this.getResource(), TARGETVALUE, value);
	}
  

    /**
     * Sets a value of property Targetvalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETVALUE, value);
	}
	
    /**
     * Sets a value of property Targetvalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetvalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Sets a value of property Targetvalue from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, TARGETVALUE, value);
	}
	
    /**
     * Sets a value of property Targetvalue from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetvalue(A_0 value) {
		Base.set(this.model, this.getResource(), TARGETVALUE, value);
	}
  


    /**
     * Removes a value of property Targetvalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETVALUE, value);
	}
	
    /**
     * Removes a value of property Targetvalue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetvalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUE, value);
	}
    /**
     * Removes a value of property Targetvalue given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, TARGETVALUE, value);
	}
	
    /**
     * Removes a value of property Targetvalue given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetvalue(A_0 value) {
		Base.remove(this.model, this.getResource(), TARGETVALUE, value);
	}
  
    /**
     * Removes all values of property Targetvalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUE);
	}
	
    /**
     * Removes all values of property Targetvalue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetvalue() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43635780 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetvaluecycle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUECYCLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43635780 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetvaluecycle() {
		return Base.has(this.model, this.getResource(), TARGETVALUECYCLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43635780 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetvaluecycle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUECYCLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43635780 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetvaluecycle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUECYCLE);
	}

     /**
     * Get all values of property Targetvaluecycle as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvaluecycle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUECYCLE);
	}
	
    /**
     * Get all values of property Targetvaluecycle as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvaluecycle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUECYCLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Targetvaluecycle as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvaluecycle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUECYCLE);
	}

    /**
     * Get all values of property Targetvaluecycle as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvaluecycle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUECYCLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Targetvaluecycle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTargetvaluecycle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUECYCLE, Thing.class);
	}
	
    /**
     * Get all values of property Targetvaluecycle as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTargetvaluecycle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUECYCLE, Thing.class);
	}

    /**
     * Get all values of property Targetvaluecycle     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTargetvaluecycle() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUECYCLE, Thing.class);
	}

    /**
     * Get all values of property Targetvaluecycle as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTargetvaluecycle_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUECYCLE, Thing.class);
	}
 
    /**
     * Adds a value to property Targetvaluecycle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTargetvaluecycle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TARGETVALUECYCLE, value);
	}
	
    /**
     * Adds a value to property Targetvaluecycle as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTargetvaluecycle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
    /**
     * Adds a value to property Targetvaluecycle from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTargetvaluecycle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TARGETVALUECYCLE, value);
	}
	
    /**
     * Adds a value to property Targetvaluecycle from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTargetvaluecycle(Thing value) {
		Base.add(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
  

    /**
     * Sets a value of property Targetvaluecycle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetvaluecycle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETVALUECYCLE, value);
	}
	
    /**
     * Sets a value of property Targetvaluecycle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetvaluecycle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
    /**
     * Sets a value of property Targetvaluecycle from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetvaluecycle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TARGETVALUECYCLE, value);
	}
	
    /**
     * Sets a value of property Targetvaluecycle from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetvaluecycle(Thing value) {
		Base.set(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
  


    /**
     * Removes a value of property Targetvaluecycle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetvaluecycle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETVALUECYCLE, value);
	}
	
    /**
     * Removes a value of property Targetvaluecycle as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetvaluecycle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
    /**
     * Removes a value of property Targetvaluecycle given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetvaluecycle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TARGETVALUECYCLE, value);
	}
	
    /**
     * Removes a value of property Targetvaluecycle given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetvaluecycle(Thing value) {
		Base.remove(this.model, this.getResource(), TARGETVALUECYCLE, value);
	}
  
    /**
     * Removes all values of property Targetvaluecycle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetvaluecycle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUECYCLE);
	}
	
    /**
     * Removes all values of property Targetvaluecycle	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetvaluecycle() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUECYCLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d4d4b8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetvaluelist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUELIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d4d4b8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetvaluelist() {
		return Base.has(this.model, this.getResource(), TARGETVALUELIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d4d4b8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetvaluelist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUELIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d4d4b8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetvaluelist( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUELIST);
	}

     /**
     * Get all values of property Targetvaluelist as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvaluelist_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUELIST);
	}
	
    /**
     * Get all values of property Targetvaluelist as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvaluelist_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUELIST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Targetvaluelist as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvaluelist_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUELIST);
	}

    /**
     * Get all values of property Targetvaluelist as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvaluelist_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUELIST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Targetvaluelist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTargetvaluelist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUELIST, Thing.class);
	}
	
    /**
     * Get all values of property Targetvaluelist as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTargetvaluelist_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUELIST, Thing.class);
	}

    /**
     * Get all values of property Targetvaluelist     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTargetvaluelist() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUELIST, Thing.class);
	}

    /**
     * Get all values of property Targetvaluelist as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTargetvaluelist_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUELIST, Thing.class);
	}
 
    /**
     * Adds a value to property Targetvaluelist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTargetvaluelist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TARGETVALUELIST, value);
	}
	
    /**
     * Adds a value to property Targetvaluelist as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTargetvaluelist( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUELIST, value);
	}
    /**
     * Adds a value to property Targetvaluelist from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTargetvaluelist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TARGETVALUELIST, value);
	}
	
    /**
     * Adds a value to property Targetvaluelist from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTargetvaluelist(Thing value) {
		Base.add(this.model, this.getResource(), TARGETVALUELIST, value);
	}
  

    /**
     * Sets a value of property Targetvaluelist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetvaluelist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETVALUELIST, value);
	}
	
    /**
     * Sets a value of property Targetvaluelist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetvaluelist( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUELIST, value);
	}
    /**
     * Sets a value of property Targetvaluelist from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetvaluelist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TARGETVALUELIST, value);
	}
	
    /**
     * Sets a value of property Targetvaluelist from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetvaluelist(Thing value) {
		Base.set(this.model, this.getResource(), TARGETVALUELIST, value);
	}
  


    /**
     * Removes a value of property Targetvaluelist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetvaluelist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETVALUELIST, value);
	}
	
    /**
     * Removes a value of property Targetvaluelist as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetvaluelist( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUELIST, value);
	}
    /**
     * Removes a value of property Targetvaluelist given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetvaluelist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TARGETVALUELIST, value);
	}
	
    /**
     * Removes a value of property Targetvaluelist given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetvaluelist(Thing value) {
		Base.remove(this.model, this.getResource(), TARGETVALUELIST, value);
	}
  
    /**
     * Removes all values of property Targetvaluelist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetvaluelist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUELIST);
	}
	
    /**
     * Removes all values of property Targetvaluelist	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetvaluelist() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUELIST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2619d129 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetvalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUEORDEREDSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2619d129 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetvalueorderedset() {
		return Base.has(this.model, this.getResource(), TARGETVALUEORDEREDSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2619d129 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetvalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUEORDEREDSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2619d129 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetvalueorderedset( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUEORDEREDSET);
	}

     /**
     * Get all values of property Targetvalueorderedset as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueorderedset_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUEORDEREDSET);
	}
	
    /**
     * Get all values of property Targetvalueorderedset as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueorderedset_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUEORDEREDSET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Targetvalueorderedset as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueorderedset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUEORDEREDSET);
	}

    /**
     * Get all values of property Targetvalueorderedset as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueorderedset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUEORDEREDSET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Targetvalueorderedset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTargetvalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUEORDEREDSET, Thing.class);
	}
	
    /**
     * Get all values of property Targetvalueorderedset as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTargetvalueorderedset_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUEORDEREDSET, Thing.class);
	}

    /**
     * Get all values of property Targetvalueorderedset     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTargetvalueorderedset() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUEORDEREDSET, Thing.class);
	}

    /**
     * Get all values of property Targetvalueorderedset as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTargetvalueorderedset_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUEORDEREDSET, Thing.class);
	}
 
    /**
     * Adds a value to property Targetvalueorderedset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTargetvalueorderedset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}
	
    /**
     * Adds a value to property Targetvalueorderedset as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTargetvalueorderedset( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
    /**
     * Adds a value to property Targetvalueorderedset from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTargetvalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}
	
    /**
     * Adds a value to property Targetvalueorderedset from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTargetvalueorderedset(Thing value) {
		Base.add(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
  

    /**
     * Sets a value of property Targetvalueorderedset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetvalueorderedset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}
	
    /**
     * Sets a value of property Targetvalueorderedset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetvalueorderedset( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
    /**
     * Sets a value of property Targetvalueorderedset from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetvalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}
	
    /**
     * Sets a value of property Targetvalueorderedset from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetvalueorderedset(Thing value) {
		Base.set(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
  


    /**
     * Removes a value of property Targetvalueorderedset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetvalueorderedset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}
	
    /**
     * Removes a value of property Targetvalueorderedset as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetvalueorderedset( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
    /**
     * Removes a value of property Targetvalueorderedset given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetvalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TARGETVALUEORDEREDSET, value);
	}
	
    /**
     * Removes a value of property Targetvalueorderedset given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetvalueorderedset(Thing value) {
		Base.remove(this.model, this.getResource(), TARGETVALUEORDEREDSET, value);
	}
  
    /**
     * Removes all values of property Targetvalueorderedset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetvalueorderedset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUEORDEREDSET);
	}
	
    /**
     * Removes all values of property Targetvalueorderedset	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetvalueorderedset() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUEORDEREDSET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15912a37 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetvalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUESET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15912a37 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetvalueset() {
		return Base.has(this.model, this.getResource(), TARGETVALUESET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15912a37 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetvalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUESET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15912a37 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetvalueset( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUESET);
	}

     /**
     * Get all values of property Targetvalueset as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueset_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUESET);
	}
	
    /**
     * Get all values of property Targetvalueset as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueset_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUESET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Targetvalueset as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUESET);
	}

    /**
     * Get all values of property Targetvalueset as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUESET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Targetvalueset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTargetvalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUESET, Thing.class);
	}
	
    /**
     * Get all values of property Targetvalueset as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTargetvalueset_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUESET, Thing.class);
	}

    /**
     * Get all values of property Targetvalueset     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTargetvalueset() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUESET, Thing.class);
	}

    /**
     * Get all values of property Targetvalueset as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTargetvalueset_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUESET, Thing.class);
	}
 
    /**
     * Adds a value to property Targetvalueset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTargetvalueset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TARGETVALUESET, value);
	}
	
    /**
     * Adds a value to property Targetvalueset as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTargetvalueset( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUESET, value);
	}
    /**
     * Adds a value to property Targetvalueset from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTargetvalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TARGETVALUESET, value);
	}
	
    /**
     * Adds a value to property Targetvalueset from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTargetvalueset(Thing value) {
		Base.add(this.model, this.getResource(), TARGETVALUESET, value);
	}
  

    /**
     * Sets a value of property Targetvalueset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetvalueset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETVALUESET, value);
	}
	
    /**
     * Sets a value of property Targetvalueset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetvalueset( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUESET, value);
	}
    /**
     * Sets a value of property Targetvalueset from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetvalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TARGETVALUESET, value);
	}
	
    /**
     * Sets a value of property Targetvalueset from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetvalueset(Thing value) {
		Base.set(this.model, this.getResource(), TARGETVALUESET, value);
	}
  


    /**
     * Removes a value of property Targetvalueset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetvalueset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETVALUESET, value);
	}
	
    /**
     * Removes a value of property Targetvalueset as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetvalueset( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUESET, value);
	}
    /**
     * Removes a value of property Targetvalueset given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetvalueset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TARGETVALUESET, value);
	}
	
    /**
     * Removes a value of property Targetvalueset given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetvalueset(Thing value) {
		Base.remove(this.model, this.getResource(), TARGETVALUESET, value);
	}
  
    /**
     * Removes all values of property Targetvalueset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetvalueset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUESET);
	}
	
    /**
     * Removes all values of property Targetvalueset	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetvalueset() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUESET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@189a6c56 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@189a6c56 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermstatus() {
		return Base.has(this.model, this.getResource(), TERMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@189a6c56 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@189a6c56 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermstatus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSTATUS);
	}

     /**
     * Get all values of property Termstatus as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermstatus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSTATUS);
	}
	
    /**
     * Get all values of property Termstatus as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermstatus_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Termstatus as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermstatus_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSTATUS);
	}

    /**
     * Get all values of property Termstatus as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermstatus_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Termstatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSTATUS, Thing.class);
	}
	
    /**
     * Get all values of property Termstatus as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTermstatus_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSTATUS, Thing.class);
	}

    /**
     * Get all values of property Termstatus     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTermstatus() {
		return Base.getAll(this.model, this.getResource(), TERMSTATUS, Thing.class);
	}

    /**
     * Get all values of property Termstatus as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTermstatus_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSTATUS, Thing.class);
	}
 
    /**
     * Adds a value to property Termstatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Adds a value to property Termstatus as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermstatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSTATUS, value);
	}
    /**
     * Adds a value to property Termstatus from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Adds a value to property Termstatus from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermstatus(Thing value) {
		Base.add(this.model, this.getResource(), TERMSTATUS, value);
	}
  

    /**
     * Sets a value of property Termstatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Sets a value of property Termstatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermstatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSTATUS, value);
	}
    /**
     * Sets a value of property Termstatus from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Sets a value of property Termstatus from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermstatus(Thing value) {
		Base.set(this.model, this.getResource(), TERMSTATUS, value);
	}
  


    /**
     * Removes a value of property Termstatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Removes a value of property Termstatus as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermstatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSTATUS, value);
	}
    /**
     * Removes a value of property Termstatus given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Removes a value of property Termstatus given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermstatus(Thing value) {
		Base.remove(this.model, this.getResource(), TERMSTATUS, value);
	}
  
    /**
     * Removes all values of property Termstatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSTATUS);
	}
	
    /**
     * Removes all values of property Termstatus	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermstatus() {
		Base.removeAll(this.model, this.getResource(), TERMSTATUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59298a3b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59298a3b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUnionOf() {
		return Base.has(this.model, this.getResource(), UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59298a3b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59298a3b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUnionOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNIONOF);
	}

     /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNIONOF);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNIONOF);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNIONOF, Thing.class);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllUnionOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIONOF, Thing.class);
	}

    /**
     * Get all values of property UnionOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllUnionOf() {
		return Base.getAll(this.model, this.getResource(), UNIONOF, Thing.class);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllUnionOf_as() {
		return Base.getAll_as(this.model, this.getResource(), UNIONOF, Thing.class);
	}
 
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Adds a value to property UnionOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUnionOf(Thing value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
  

    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Sets a value of property UnionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUnionOf(Thing value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
  


    /**
     * Removes a value of property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Removes a value of property UnionOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUnionOf(Thing value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
  
    /**
     * Removes all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNIONOF);
	}
	
    /**
     * Removes all values of property UnionOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUnionOf() {
		Base.removeAll(this.model, this.getResource(), UNIONOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c007f53 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUripseudoproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, URIPSEUDOPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c007f53 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUripseudoproperty() {
		return Base.has(this.model, this.getResource(), URIPSEUDOPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c007f53 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUripseudoproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, URIPSEUDOPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c007f53 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUripseudoproperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), URIPSEUDOPROPERTY);
	}

     /**
     * Get all values of property Uripseudoproperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUripseudoproperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, URIPSEUDOPROPERTY);
	}
	
    /**
     * Get all values of property Uripseudoproperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUripseudoproperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, URIPSEUDOPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Uripseudoproperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUripseudoproperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), URIPSEUDOPROPERTY);
	}

    /**
     * Get all values of property Uripseudoproperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUripseudoproperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), URIPSEUDOPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Uripseudoproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllUripseudoproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, URIPSEUDOPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property Uripseudoproperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllUripseudoproperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, URIPSEUDOPROPERTY, Thing.class);
	}

    /**
     * Get all values of property Uripseudoproperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllUripseudoproperty() {
		return Base.getAll(this.model, this.getResource(), URIPSEUDOPROPERTY, Thing.class);
	}

    /**
     * Get all values of property Uripseudoproperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllUripseudoproperty_as() {
		return Base.getAll_as(this.model, this.getResource(), URIPSEUDOPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property Uripseudoproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUripseudoproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, URIPSEUDOPROPERTY, value);
	}
	
    /**
     * Adds a value to property Uripseudoproperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUripseudoproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), URIPSEUDOPROPERTY, value);
	}
    /**
     * Adds a value to property Uripseudoproperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUripseudoproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, URIPSEUDOPROPERTY, value);
	}
	
    /**
     * Adds a value to property Uripseudoproperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUripseudoproperty(Thing value) {
		Base.add(this.model, this.getResource(), URIPSEUDOPROPERTY, value);
	}
  

    /**
     * Sets a value of property Uripseudoproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUripseudoproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, URIPSEUDOPROPERTY, value);
	}
	
    /**
     * Sets a value of property Uripseudoproperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUripseudoproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), URIPSEUDOPROPERTY, value);
	}
    /**
     * Sets a value of property Uripseudoproperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUripseudoproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, URIPSEUDOPROPERTY, value);
	}
	
    /**
     * Sets a value of property Uripseudoproperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUripseudoproperty(Thing value) {
		Base.set(this.model, this.getResource(), URIPSEUDOPROPERTY, value);
	}
  


    /**
     * Removes a value of property Uripseudoproperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUripseudoproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, URIPSEUDOPROPERTY, value);
	}
	
    /**
     * Removes a value of property Uripseudoproperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUripseudoproperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), URIPSEUDOPROPERTY, value);
	}
    /**
     * Removes a value of property Uripseudoproperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUripseudoproperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, URIPSEUDOPROPERTY, value);
	}
	
    /**
     * Removes a value of property Uripseudoproperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUripseudoproperty(Thing value) {
		Base.remove(this.model, this.getResource(), URIPSEUDOPROPERTY, value);
	}
  
    /**
     * Removes all values of property Uripseudoproperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUripseudoproperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, URIPSEUDOPROPERTY);
	}
	
    /**
     * Removes all values of property Uripseudoproperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUripseudoproperty() {
		Base.removeAll(this.model, this.getResource(), URIPSEUDOPROPERTY);
	}
 }