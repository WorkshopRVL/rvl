/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 29.10.13 09:05
 */
package org.purl.rvl.interpreter.rvl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Discretestepcount </li>
 *   <li> Discretestepsize_deprecated_ </li>
 *   <li> Discretize </li>
 *   <li> Excludetargetvalue </li>
 *   <li> Invertorderoftargetvalues </li>
 *   <li> Ordersourcevaluesby </li>
 *   <li> Ordertargetvaluesby </li>
 *   <li> Quantifysourcevaluesby </li>
 *   <li> Quantifytargetvaluesby </li>
 *   <li> Scaletransformationtype </li>
 *   <li> Sourcefilter </li>
 *   <li> Sourceinterval </li>
 *   <li> Sourcevalueorderedset </li>
 *   <li> Sourcevalueslabel </li>
 *   <li> Targetvalueinterval </li>
 *   <li> Targetvalues_abstract_ </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 29.10.13 09:05
 */
public class Valuemapping extends Mapping {

    /** http://purl.org/rvl/ValueMapping */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/rvl/ValueMapping", false);

    /** http://purl.org/rvl/discreteStepCount */
    @SuppressWarnings("hiding")
	public static final URI DISCRETESTEPCOUNT = new URIImpl("http://purl.org/rvl/discreteStepCount",false);

    /** http://purl.org/rvl/discreteStepSize */
    @SuppressWarnings("hiding")
	public static final URI DISCRETESTEPSIZE_DEPRECATED_ = new URIImpl("http://purl.org/rvl/discreteStepSize",false);

    /** http://purl.org/rvl/discretize */
    @SuppressWarnings("hiding")
	public static final URI DISCRETIZE = new URIImpl("http://purl.org/rvl/discretize",false);

    /** http://purl.org/rvl/excludeTargetValue */
    @SuppressWarnings("hiding")
	public static final URI EXCLUDETARGETVALUE = new URIImpl("http://purl.org/rvl/excludeTargetValue",false);

    /** http://purl.org/rvl/invertOrderOfTargetValues */
    @SuppressWarnings("hiding")
	public static final URI INVERTORDEROFTARGETVALUES = new URIImpl("http://purl.org/rvl/invertOrderOfTargetValues",false);

    /** http://purl.org/rvl/orderSourceValuesBy */
    @SuppressWarnings("hiding")
	public static final URI ORDERSOURCEVALUESBY = new URIImpl("http://purl.org/rvl/orderSourceValuesBy",false);

    /** http://purl.org/rvl/orderTargetValuesBy */
    @SuppressWarnings("hiding")
	public static final URI ORDERTARGETVALUESBY = new URIImpl("http://purl.org/rvl/orderTargetValuesBy",false);

    /** http://purl.org/rvl/quantifySourceValuesBy */
    @SuppressWarnings("hiding")
	public static final URI QUANTIFYSOURCEVALUESBY = new URIImpl("http://purl.org/rvl/quantifySourceValuesBy",false);

    /** http://purl.org/rvl/quantifyTargetValuesBy */
    @SuppressWarnings("hiding")
	public static final URI QUANTIFYTARGETVALUESBY = new URIImpl("http://purl.org/rvl/quantifyTargetValuesBy",false);

    /** http://purl.org/rvl/scaleTransformation */
    @SuppressWarnings("hiding")
	public static final URI SCALETRANSFORMATIONTYPE = new URIImpl("http://purl.org/rvl/scaleTransformation",false);

    /** http://purl.org/rvl/sourceFilter */
    @SuppressWarnings("hiding")
	public static final URI SOURCEFILTER = new URIImpl("http://purl.org/rvl/sourceFilter",false);

    /** http://purl.org/rvl/sourceValueInterval */
    @SuppressWarnings("hiding")
	public static final URI SOURCEINTERVAL = new URIImpl("http://purl.org/rvl/sourceValueInterval",false);

    /** http://purl.org/rvl/sourceValueOrderedSet */
    @SuppressWarnings("hiding")
	public static final URI SOURCEVALUEORDEREDSET = new URIImpl("http://purl.org/rvl/sourceValueOrderedSet",false);

    /** http://purl.org/rvl/sourceValuesLabel */
    @SuppressWarnings("hiding")
	public static final URI SOURCEVALUESLABEL = new URIImpl("http://purl.org/rvl/sourceValuesLabel",false);

    /** http://purl.org/rvl/targetValueInterval */
    @SuppressWarnings("hiding")
	public static final URI TARGETVALUEINTERVAL = new URIImpl("http://purl.org/rvl/targetValueInterval",false);

    /** http://purl.org/rvl/targetValues */
    @SuppressWarnings("hiding")
	public static final URI TARGETVALUES_ABSTRACT_ = new URIImpl("http://purl.org/rvl/targetValues",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/rvl/discreteStepCount",false),
      new URIImpl("http://purl.org/rvl/discreteStepSize",false),
      new URIImpl("http://purl.org/rvl/discretize",false),
      new URIImpl("http://purl.org/rvl/excludeTargetValue",false),
      new URIImpl("http://purl.org/rvl/invertOrderOfTargetValues",false),
      new URIImpl("http://purl.org/rvl/orderSourceValuesBy",false),
      new URIImpl("http://purl.org/rvl/orderTargetValuesBy",false),
      new URIImpl("http://purl.org/rvl/quantifySourceValuesBy",false),
      new URIImpl("http://purl.org/rvl/quantifyTargetValuesBy",false),
      new URIImpl("http://purl.org/rvl/scaleTransformation",false),
      new URIImpl("http://purl.org/rvl/sourceFilter",false),
      new URIImpl("http://purl.org/rvl/sourceValueInterval",false),
      new URIImpl("http://purl.org/rvl/sourceValueOrderedSet",false),
      new URIImpl("http://purl.org/rvl/sourceValuesLabel",false),
      new URIImpl("http://purl.org/rvl/targetValueInterval",false),
      new URIImpl("http://purl.org/rvl/targetValues",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Valuemapping ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Valuemapping ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Valuemapping ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Valuemapping ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Valuemapping ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Valuemapping  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Valuemapping  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Valuemapping.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/rvl/ValueMapping).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Valuemapping> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Valuemapping.class );
	}

    /**
	 * Remove rdf:type Valuemapping from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Valuemapping' to this Valuemapping instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllValuemapping_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Property_to_Graphic_AttributeMapping.VALUEMAPPING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Valuemapping' to this Valuemapping instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllValuemapping_Inverse() {
		return Base.getAll_Inverse(this.model, Property_to_Graphic_AttributeMapping.VALUEMAPPING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Valuemapping' to this Valuemapping instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllValuemapping_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Property_to_Graphic_AttributeMapping.VALUEMAPPING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d295c59 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDiscretestepcount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISCRETESTEPCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d295c59 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDiscretestepcount() {
		return Base.has(this.model, this.getResource(), DISCRETESTEPCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d295c59 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDiscretestepcount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISCRETESTEPCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d295c59 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDiscretestepcount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCRETESTEPCOUNT);
	}

     /**
     * Get all values of property Discretestepcount as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDiscretestepcount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISCRETESTEPCOUNT);
	}
	
    /**
     * Get all values of property Discretestepcount as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDiscretestepcount_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETESTEPCOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Discretestepcount as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDiscretestepcount_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCRETESTEPCOUNT);
	}

    /**
     * Get all values of property Discretestepcount as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDiscretestepcount_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETESTEPCOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Discretestepcount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllDiscretestepcount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISCRETESTEPCOUNT, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Discretestepcount as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllDiscretestepcount_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETESTEPCOUNT, java.lang.Integer.class);
	}

    /**
     * Get all values of property Discretestepcount     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllDiscretestepcount() {
		return Base.getAll(this.model, this.getResource(), DISCRETESTEPCOUNT, java.lang.Integer.class);
	}

    /**
     * Get all values of property Discretestepcount as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllDiscretestepcount_as() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETESTEPCOUNT, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Discretestepcount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDiscretestepcount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISCRETESTEPCOUNT, value);
	}
	
    /**
     * Adds a value to property Discretestepcount as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDiscretestepcount( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
    /**
     * Adds a value to property Discretestepcount from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDiscretestepcount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, DISCRETESTEPCOUNT, value);
	}
	
    /**
     * Adds a value to property Discretestepcount from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDiscretestepcount(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
  

    /**
     * Sets a value of property Discretestepcount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDiscretestepcount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISCRETESTEPCOUNT, value);
	}
	
    /**
     * Sets a value of property Discretestepcount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDiscretestepcount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
    /**
     * Sets a value of property Discretestepcount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDiscretestepcount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, DISCRETESTEPCOUNT, value);
	}
	
    /**
     * Sets a value of property Discretestepcount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDiscretestepcount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
  


    /**
     * Removes a value of property Discretestepcount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDiscretestepcount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISCRETESTEPCOUNT, value);
	}
	
    /**
     * Removes a value of property Discretestepcount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDiscretestepcount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
    /**
     * Removes a value of property Discretestepcount given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDiscretestepcount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, DISCRETESTEPCOUNT, value);
	}
	
    /**
     * Removes a value of property Discretestepcount given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDiscretestepcount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), DISCRETESTEPCOUNT, value);
	}
  
    /**
     * Removes all values of property Discretestepcount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDiscretestepcount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISCRETESTEPCOUNT);
	}
	
    /**
     * Removes all values of property Discretestepcount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDiscretestepcount() {
		Base.removeAll(this.model, this.getResource(), DISCRETESTEPCOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44ab8b3b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDiscretestepsize_deprecated_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44ab8b3b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDiscretestepsize_deprecated_() {
		return Base.has(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44ab8b3b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDiscretestepsize_deprecated_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44ab8b3b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDiscretestepsize_deprecated_( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_);
	}

     /**
     * Get all values of property Discretestepsize_deprecated_ as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDiscretestepsize_deprecated__asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_);
	}
	
    /**
     * Get all values of property Discretestepsize_deprecated_ as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDiscretestepsize_deprecated__asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Discretestepsize_deprecated_ as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDiscretestepsize_deprecated__asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_);
	}

    /**
     * Get all values of property Discretestepsize_deprecated_ as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDiscretestepsize_deprecated__asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Discretestepsize_deprecated_     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllDiscretestepsize_deprecated_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, java.lang.Float.class);
	}
	
    /**
     * Get all values of property Discretestepsize_deprecated_ as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllDiscretestepsize_deprecated__as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, java.lang.Float.class);
	}

    /**
     * Get all values of property Discretestepsize_deprecated_     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllDiscretestepsize_deprecated_() {
		return Base.getAll(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, java.lang.Float.class);
	}

    /**
     * Get all values of property Discretestepsize_deprecated_ as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllDiscretestepsize_deprecated__as() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property Discretestepsize_deprecated_ as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDiscretestepsize_deprecated_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}
	
    /**
     * Adds a value to property Discretestepsize_deprecated_ as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDiscretestepsize_deprecated_( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
    /**
     * Adds a value to property Discretestepsize_deprecated_ from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDiscretestepsize_deprecated_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}
	
    /**
     * Adds a value to property Discretestepsize_deprecated_ from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDiscretestepsize_deprecated_(java.lang.Float value) {
		Base.add(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
  

    /**
     * Sets a value of property Discretestepsize_deprecated_ from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDiscretestepsize_deprecated_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}
	
    /**
     * Sets a value of property Discretestepsize_deprecated_ from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDiscretestepsize_deprecated_( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
    /**
     * Sets a value of property Discretestepsize_deprecated_ from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDiscretestepsize_deprecated_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}
	
    /**
     * Sets a value of property Discretestepsize_deprecated_ from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDiscretestepsize_deprecated_(java.lang.Float value) {
		Base.set(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
  


    /**
     * Removes a value of property Discretestepsize_deprecated_ as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDiscretestepsize_deprecated_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}
	
    /**
     * Removes a value of property Discretestepsize_deprecated_ as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDiscretestepsize_deprecated_( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
    /**
     * Removes a value of property Discretestepsize_deprecated_ given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDiscretestepsize_deprecated_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_, value);
	}
	
    /**
     * Removes a value of property Discretestepsize_deprecated_ given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDiscretestepsize_deprecated_(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_, value);
	}
  
    /**
     * Removes all values of property Discretestepsize_deprecated_     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDiscretestepsize_deprecated_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISCRETESTEPSIZE_DEPRECATED_);
	}
	
    /**
     * Removes all values of property Discretestepsize_deprecated_	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDiscretestepsize_deprecated_() {
		Base.removeAll(this.model, this.getResource(), DISCRETESTEPSIZE_DEPRECATED_);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@225bfb7d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDiscretize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISCRETIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@225bfb7d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDiscretize() {
		return Base.has(this.model, this.getResource(), DISCRETIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@225bfb7d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDiscretize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISCRETIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@225bfb7d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDiscretize( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCRETIZE);
	}

     /**
     * Get all values of property Discretize as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDiscretize_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISCRETIZE);
	}
	
    /**
     * Get all values of property Discretize as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDiscretize_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETIZE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Discretize as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDiscretize_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCRETIZE);
	}

    /**
     * Get all values of property Discretize as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDiscretize_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETIZE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Discretize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Boolean> getAllDiscretize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISCRETIZE, java.lang.Boolean.class);
	}
	
    /**
     * Get all values of property Discretize as a ReactorResult of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Boolean> getAllDiscretize_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCRETIZE, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Discretize     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Boolean> getAllDiscretize() {
		return Base.getAll(this.model, this.getResource(), DISCRETIZE, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Discretize as a ReactorResult of java.lang.Boolean 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Boolean> getAllDiscretize_as() {
		return Base.getAll_as(this.model, this.getResource(), DISCRETIZE, java.lang.Boolean.class);
	}
 
    /**
     * Adds a value to property Discretize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDiscretize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISCRETIZE, value);
	}
	
    /**
     * Adds a value to property Discretize as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDiscretize( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISCRETIZE, value);
	}
    /**
     * Adds a value to property Discretize from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDiscretize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, DISCRETIZE, value);
	}
	
    /**
     * Adds a value to property Discretize from an instance of java.lang.Boolean 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDiscretize(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), DISCRETIZE, value);
	}
  

    /**
     * Sets a value of property Discretize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDiscretize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISCRETIZE, value);
	}
	
    /**
     * Sets a value of property Discretize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDiscretize( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISCRETIZE, value);
	}
    /**
     * Sets a value of property Discretize from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDiscretize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, DISCRETIZE, value);
	}
	
    /**
     * Sets a value of property Discretize from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDiscretize(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), DISCRETIZE, value);
	}
  


    /**
     * Removes a value of property Discretize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDiscretize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISCRETIZE, value);
	}
	
    /**
     * Removes a value of property Discretize as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDiscretize( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISCRETIZE, value);
	}
    /**
     * Removes a value of property Discretize given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDiscretize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, DISCRETIZE, value);
	}
	
    /**
     * Removes a value of property Discretize given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDiscretize(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), DISCRETIZE, value);
	}
  
    /**
     * Removes all values of property Discretize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDiscretize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISCRETIZE);
	}
	
    /**
     * Removes all values of property Discretize	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDiscretize() {
		Base.removeAll(this.model, this.getResource(), DISCRETIZE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bd0815 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExcludetargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXCLUDETARGETVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bd0815 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExcludetargetvalue() {
		return Base.has(this.model, this.getResource(), EXCLUDETARGETVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bd0815 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExcludetargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXCLUDETARGETVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bd0815 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExcludetargetvalue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXCLUDETARGETVALUE);
	}

     /**
     * Get all values of property Excludetargetvalue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExcludetargetvalue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXCLUDETARGETVALUE);
	}
	
    /**
     * Get all values of property Excludetargetvalue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExcludetargetvalue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXCLUDETARGETVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Excludetargetvalue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExcludetargetvalue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXCLUDETARGETVALUE);
	}

    /**
     * Get all values of property Excludetargetvalue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExcludetargetvalue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXCLUDETARGETVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Excludetargetvalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<VisualAttribute> getAllExcludetargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXCLUDETARGETVALUE, VisualAttribute.class);
	}
	
    /**
     * Get all values of property Excludetargetvalue as a ReactorResult of VisualAttribute 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<VisualAttribute> getAllExcludetargetvalue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXCLUDETARGETVALUE, VisualAttribute.class);
	}

    /**
     * Get all values of property Excludetargetvalue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<VisualAttribute> getAllExcludetargetvalue() {
		return Base.getAll(this.model, this.getResource(), EXCLUDETARGETVALUE, VisualAttribute.class);
	}

    /**
     * Get all values of property Excludetargetvalue as a ReactorResult of VisualAttribute 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<VisualAttribute> getAllExcludetargetvalue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXCLUDETARGETVALUE, VisualAttribute.class);
	}
 
    /**
     * Adds a value to property Excludetargetvalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExcludetargetvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXCLUDETARGETVALUE, value);
	}
	
    /**
     * Adds a value to property Excludetargetvalue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExcludetargetvalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
    /**
     * Adds a value to property Excludetargetvalue from an instance of VisualAttribute 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExcludetargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, VisualAttribute value) {
		Base.add(model, instanceResource, EXCLUDETARGETVALUE, value);
	}
	
    /**
     * Adds a value to property Excludetargetvalue from an instance of VisualAttribute 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExcludetargetvalue(VisualAttribute value) {
		Base.add(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
  

    /**
     * Sets a value of property Excludetargetvalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExcludetargetvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXCLUDETARGETVALUE, value);
	}
	
    /**
     * Sets a value of property Excludetargetvalue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExcludetargetvalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
    /**
     * Sets a value of property Excludetargetvalue from an instance of VisualAttribute 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExcludetargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, VisualAttribute value) {
		Base.set(model, instanceResource, EXCLUDETARGETVALUE, value);
	}
	
    /**
     * Sets a value of property Excludetargetvalue from an instance of VisualAttribute 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExcludetargetvalue(VisualAttribute value) {
		Base.set(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
  


    /**
     * Removes a value of property Excludetargetvalue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExcludetargetvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXCLUDETARGETVALUE, value);
	}
	
    /**
     * Removes a value of property Excludetargetvalue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExcludetargetvalue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
    /**
     * Removes a value of property Excludetargetvalue given as an instance of VisualAttribute 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExcludetargetvalue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, VisualAttribute value) {
		Base.remove(model, instanceResource, EXCLUDETARGETVALUE, value);
	}
	
    /**
     * Removes a value of property Excludetargetvalue given as an instance of VisualAttribute 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExcludetargetvalue(VisualAttribute value) {
		Base.remove(this.model, this.getResource(), EXCLUDETARGETVALUE, value);
	}
  
    /**
     * Removes all values of property Excludetargetvalue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExcludetargetvalue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXCLUDETARGETVALUE);
	}
	
    /**
     * Removes all values of property Excludetargetvalue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExcludetargetvalue() {
		Base.removeAll(this.model, this.getResource(), EXCLUDETARGETVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68f8093f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInvertorderoftargetvalues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVERTORDEROFTARGETVALUES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68f8093f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInvertorderoftargetvalues() {
		return Base.has(this.model, this.getResource(), INVERTORDEROFTARGETVALUES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68f8093f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInvertorderoftargetvalues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVERTORDEROFTARGETVALUES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68f8093f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInvertorderoftargetvalues( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERTORDEROFTARGETVALUES);
	}

     /**
     * Get all values of property Invertorderoftargetvalues as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvertorderoftargetvalues_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERTORDEROFTARGETVALUES);
	}
	
    /**
     * Get all values of property Invertorderoftargetvalues as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvertorderoftargetvalues_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERTORDEROFTARGETVALUES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Invertorderoftargetvalues as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvertorderoftargetvalues_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERTORDEROFTARGETVALUES);
	}

    /**
     * Get all values of property Invertorderoftargetvalues as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvertorderoftargetvalues_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Invertorderoftargetvalues     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Boolean> getAllInvertorderoftargetvalues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERTORDEROFTARGETVALUES, java.lang.Boolean.class);
	}
	
    /**
     * Get all values of property Invertorderoftargetvalues as a ReactorResult of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Boolean> getAllInvertorderoftargetvalues_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERTORDEROFTARGETVALUES, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Invertorderoftargetvalues     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Boolean> getAllInvertorderoftargetvalues() {
		return Base.getAll(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Invertorderoftargetvalues as a ReactorResult of java.lang.Boolean 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Boolean> getAllInvertorderoftargetvalues_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, java.lang.Boolean.class);
	}
 
    /**
     * Adds a value to property Invertorderoftargetvalues as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInvertorderoftargetvalues( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}
	
    /**
     * Adds a value to property Invertorderoftargetvalues as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInvertorderoftargetvalues( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
    /**
     * Adds a value to property Invertorderoftargetvalues from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInvertorderoftargetvalues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}
	
    /**
     * Adds a value to property Invertorderoftargetvalues from an instance of java.lang.Boolean 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInvertorderoftargetvalues(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
  

    /**
     * Sets a value of property Invertorderoftargetvalues from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInvertorderoftargetvalues( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}
	
    /**
     * Sets a value of property Invertorderoftargetvalues from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInvertorderoftargetvalues( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
    /**
     * Sets a value of property Invertorderoftargetvalues from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInvertorderoftargetvalues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}
	
    /**
     * Sets a value of property Invertorderoftargetvalues from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInvertorderoftargetvalues(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
  


    /**
     * Removes a value of property Invertorderoftargetvalues as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInvertorderoftargetvalues( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}
	
    /**
     * Removes a value of property Invertorderoftargetvalues as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInvertorderoftargetvalues( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
    /**
     * Removes a value of property Invertorderoftargetvalues given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInvertorderoftargetvalues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, INVERTORDEROFTARGETVALUES, value);
	}
	
    /**
     * Removes a value of property Invertorderoftargetvalues given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInvertorderoftargetvalues(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), INVERTORDEROFTARGETVALUES, value);
	}
  
    /**
     * Removes all values of property Invertorderoftargetvalues     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInvertorderoftargetvalues( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERTORDEROFTARGETVALUES);
	}
	
    /**
     * Removes all values of property Invertorderoftargetvalues	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInvertorderoftargetvalues() {
		Base.removeAll(this.model, this.getResource(), INVERTORDEROFTARGETVALUES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28c75ad4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOrdersourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ORDERSOURCEVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28c75ad4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOrdersourcevaluesby() {
		return Base.has(this.model, this.getResource(), ORDERSOURCEVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28c75ad4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOrdersourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ORDERSOURCEVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28c75ad4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOrdersourcevaluesby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORDERSOURCEVALUESBY);
	}

     /**
     * Get all values of property Ordersourcevaluesby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOrdersourcevaluesby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORDERSOURCEVALUESBY);
	}
	
    /**
     * Get all values of property Ordersourcevaluesby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOrdersourcevaluesby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDERSOURCEVALUESBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Ordersourcevaluesby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOrdersourcevaluesby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORDERSOURCEVALUESBY);
	}

    /**
     * Get all values of property Ordersourcevaluesby as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOrdersourcevaluesby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORDERSOURCEVALUESBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Ordersourcevaluesby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdersourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORDERSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
	
    /**
     * Get all values of property Ordersourcevaluesby as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdersourcevaluesby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDERSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Ordersourcevaluesby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdersourcevaluesby() {
		return Base.getAll(this.model, this.getResource(), ORDERSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Ordersourcevaluesby as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdersourcevaluesby_as() {
		return Base.getAll_as(this.model, this.getResource(), ORDERSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
 
    /**
     * Adds a value to property Ordersourcevaluesby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOrdersourcevaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}
	
    /**
     * Adds a value to property Ordersourcevaluesby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOrdersourcevaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
    /**
     * Adds a value to property Ordersourcevaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOrdersourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}
	
    /**
     * Adds a value to property Ordersourcevaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOrdersourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
  

    /**
     * Sets a value of property Ordersourcevaluesby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOrdersourcevaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}
	
    /**
     * Sets a value of property Ordersourcevaluesby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOrdersourcevaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
    /**
     * Sets a value of property Ordersourcevaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOrdersourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}
	
    /**
     * Sets a value of property Ordersourcevaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOrdersourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
  


    /**
     * Removes a value of property Ordersourcevaluesby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOrdersourcevaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}
	
    /**
     * Removes a value of property Ordersourcevaluesby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOrdersourcevaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
    /**
     * Removes a value of property Ordersourcevaluesby given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOrdersourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, ORDERSOURCEVALUESBY, value);
	}
	
    /**
     * Removes a value of property Ordersourcevaluesby given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOrdersourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), ORDERSOURCEVALUESBY, value);
	}
  
    /**
     * Removes all values of property Ordersourcevaluesby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOrdersourcevaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORDERSOURCEVALUESBY);
	}
	
    /**
     * Removes all values of property Ordersourcevaluesby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOrdersourcevaluesby() {
		Base.removeAll(this.model, this.getResource(), ORDERSOURCEVALUESBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7065cc33 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOrdertargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ORDERTARGETVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7065cc33 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOrdertargetvaluesby() {
		return Base.has(this.model, this.getResource(), ORDERTARGETVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7065cc33 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOrdertargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ORDERTARGETVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7065cc33 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOrdertargetvaluesby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORDERTARGETVALUESBY);
	}

     /**
     * Get all values of property Ordertargetvaluesby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOrdertargetvaluesby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORDERTARGETVALUESBY);
	}
	
    /**
     * Get all values of property Ordertargetvaluesby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOrdertargetvaluesby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDERTARGETVALUESBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Ordertargetvaluesby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOrdertargetvaluesby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORDERTARGETVALUESBY);
	}

    /**
     * Get all values of property Ordertargetvaluesby as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOrdertargetvaluesby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORDERTARGETVALUESBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Ordertargetvaluesby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdertargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORDERTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
	
    /**
     * Get all values of property Ordertargetvaluesby as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdertargetvaluesby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORDERTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Ordertargetvaluesby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdertargetvaluesby() {
		return Base.getAll(this.model, this.getResource(), ORDERTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Ordertargetvaluesby as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOrdertargetvaluesby_as() {
		return Base.getAll_as(this.model, this.getResource(), ORDERTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
 
    /**
     * Adds a value to property Ordertargetvaluesby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOrdertargetvaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ORDERTARGETVALUESBY, value);
	}
	
    /**
     * Adds a value to property Ordertargetvaluesby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOrdertargetvaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
    /**
     * Adds a value to property Ordertargetvaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOrdertargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, ORDERTARGETVALUESBY, value);
	}
	
    /**
     * Adds a value to property Ordertargetvaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOrdertargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
  

    /**
     * Sets a value of property Ordertargetvaluesby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOrdertargetvaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ORDERTARGETVALUESBY, value);
	}
	
    /**
     * Sets a value of property Ordertargetvaluesby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOrdertargetvaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
    /**
     * Sets a value of property Ordertargetvaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOrdertargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, ORDERTARGETVALUESBY, value);
	}
	
    /**
     * Sets a value of property Ordertargetvaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOrdertargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
  


    /**
     * Removes a value of property Ordertargetvaluesby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOrdertargetvaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ORDERTARGETVALUESBY, value);
	}
	
    /**
     * Removes a value of property Ordertargetvaluesby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOrdertargetvaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
    /**
     * Removes a value of property Ordertargetvaluesby given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOrdertargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, ORDERTARGETVALUESBY, value);
	}
	
    /**
     * Removes a value of property Ordertargetvaluesby given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOrdertargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), ORDERTARGETVALUESBY, value);
	}
  
    /**
     * Removes all values of property Ordertargetvaluesby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOrdertargetvaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORDERTARGETVALUESBY);
	}
	
    /**
     * Removes all values of property Ordertargetvaluesby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOrdertargetvaluesby() {
		Base.removeAll(this.model, this.getResource(), ORDERTARGETVALUESBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12ac0f75 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQuantifysourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUANTIFYSOURCEVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12ac0f75 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQuantifysourcevaluesby() {
		return Base.has(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12ac0f75 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQuantifysourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUANTIFYSOURCEVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12ac0f75 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQuantifysourcevaluesby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY);
	}

     /**
     * Get all values of property Quantifysourcevaluesby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQuantifysourcevaluesby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUANTIFYSOURCEVALUESBY);
	}
	
    /**
     * Get all values of property Quantifysourcevaluesby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQuantifysourcevaluesby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTIFYSOURCEVALUESBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Quantifysourcevaluesby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQuantifysourcevaluesby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY);
	}

    /**
     * Get all values of property Quantifysourcevaluesby as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQuantifysourcevaluesby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Quantifysourcevaluesby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifysourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUANTIFYSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
	
    /**
     * Get all values of property Quantifysourcevaluesby as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifysourcevaluesby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTIFYSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Quantifysourcevaluesby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifysourcevaluesby() {
		return Base.getAll(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Quantifysourcevaluesby as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifysourcevaluesby_as() {
		return Base.getAll_as(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
 
    /**
     * Adds a value to property Quantifysourcevaluesby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQuantifysourcevaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}
	
    /**
     * Adds a value to property Quantifysourcevaluesby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQuantifysourcevaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
    /**
     * Adds a value to property Quantifysourcevaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQuantifysourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}
	
    /**
     * Adds a value to property Quantifysourcevaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQuantifysourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
  

    /**
     * Sets a value of property Quantifysourcevaluesby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQuantifysourcevaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}
	
    /**
     * Sets a value of property Quantifysourcevaluesby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQuantifysourcevaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
    /**
     * Sets a value of property Quantifysourcevaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQuantifysourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}
	
    /**
     * Sets a value of property Quantifysourcevaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQuantifysourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
  


    /**
     * Removes a value of property Quantifysourcevaluesby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQuantifysourcevaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}
	
    /**
     * Removes a value of property Quantifysourcevaluesby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQuantifysourcevaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
    /**
     * Removes a value of property Quantifysourcevaluesby given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQuantifysourcevaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, QUANTIFYSOURCEVALUESBY, value);
	}
	
    /**
     * Removes a value of property Quantifysourcevaluesby given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQuantifysourcevaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY, value);
	}
  
    /**
     * Removes all values of property Quantifysourcevaluesby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQuantifysourcevaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUANTIFYSOURCEVALUESBY);
	}
	
    /**
     * Removes all values of property Quantifysourcevaluesby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQuantifysourcevaluesby() {
		Base.removeAll(this.model, this.getResource(), QUANTIFYSOURCEVALUESBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29871db1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQuantifytargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUANTIFYTARGETVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29871db1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQuantifytargetvaluesby() {
		return Base.has(this.model, this.getResource(), QUANTIFYTARGETVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29871db1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQuantifytargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUANTIFYTARGETVALUESBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29871db1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQuantifytargetvaluesby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUANTIFYTARGETVALUESBY);
	}

     /**
     * Get all values of property Quantifytargetvaluesby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQuantifytargetvaluesby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUANTIFYTARGETVALUESBY);
	}
	
    /**
     * Get all values of property Quantifytargetvaluesby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQuantifytargetvaluesby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTIFYTARGETVALUESBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Quantifytargetvaluesby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQuantifytargetvaluesby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUANTIFYTARGETVALUESBY);
	}

    /**
     * Get all values of property Quantifytargetvaluesby as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQuantifytargetvaluesby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Quantifytargetvaluesby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifytargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUANTIFYTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
	
    /**
     * Get all values of property Quantifytargetvaluesby as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifytargetvaluesby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUANTIFYTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Quantifytargetvaluesby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifytargetvaluesby() {
		return Base.getAll(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Quantifytargetvaluesby as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllQuantifytargetvaluesby_as() {
		return Base.getAll_as(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
 
    /**
     * Adds a value to property Quantifytargetvaluesby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQuantifytargetvaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}
	
    /**
     * Adds a value to property Quantifytargetvaluesby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQuantifytargetvaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
    /**
     * Adds a value to property Quantifytargetvaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQuantifytargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}
	
    /**
     * Adds a value to property Quantifytargetvaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQuantifytargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
  

    /**
     * Sets a value of property Quantifytargetvaluesby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQuantifytargetvaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}
	
    /**
     * Sets a value of property Quantifytargetvaluesby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQuantifytargetvaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
    /**
     * Sets a value of property Quantifytargetvaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQuantifytargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}
	
    /**
     * Sets a value of property Quantifytargetvaluesby from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQuantifytargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
  


    /**
     * Removes a value of property Quantifytargetvaluesby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQuantifytargetvaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}
	
    /**
     * Removes a value of property Quantifytargetvaluesby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQuantifytargetvaluesby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
    /**
     * Removes a value of property Quantifytargetvaluesby given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQuantifytargetvaluesby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, QUANTIFYTARGETVALUESBY, value);
	}
	
    /**
     * Removes a value of property Quantifytargetvaluesby given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQuantifytargetvaluesby(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), QUANTIFYTARGETVALUESBY, value);
	}
  
    /**
     * Removes all values of property Quantifytargetvaluesby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQuantifytargetvaluesby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUANTIFYTARGETVALUESBY);
	}
	
    /**
     * Removes all values of property Quantifytargetvaluesby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQuantifytargetvaluesby() {
		Base.removeAll(this.model, this.getResource(), QUANTIFYTARGETVALUESBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c364890 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasScaletransformationtype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SCALETRANSFORMATIONTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c364890 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasScaletransformationtype() {
		return Base.has(this.model, this.getResource(), SCALETRANSFORMATIONTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c364890 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasScaletransformationtype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SCALETRANSFORMATIONTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c364890 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasScaletransformationtype( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCALETRANSFORMATIONTYPE);
	}

     /**
     * Get all values of property Scaletransformationtype as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllScaletransformationtype_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SCALETRANSFORMATIONTYPE);
	}
	
    /**
     * Get all values of property Scaletransformationtype as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllScaletransformationtype_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCALETRANSFORMATIONTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Scaletransformationtype as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllScaletransformationtype_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SCALETRANSFORMATIONTYPE);
	}

    /**
     * Get all values of property Scaletransformationtype as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllScaletransformationtype_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Scaletransformationtype     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Interpolationvalue> getAllScaletransformationtype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SCALETRANSFORMATIONTYPE, Interpolationvalue.class);
	}
	
    /**
     * Get all values of property Scaletransformationtype as a ReactorResult of Interpolationvalue 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Interpolationvalue> getAllScaletransformationtype_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCALETRANSFORMATIONTYPE, Interpolationvalue.class);
	}

    /**
     * Get all values of property Scaletransformationtype     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Interpolationvalue> getAllScaletransformationtype() {
		return Base.getAll(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, Interpolationvalue.class);
	}

    /**
     * Get all values of property Scaletransformationtype as a ReactorResult of Interpolationvalue 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Interpolationvalue> getAllScaletransformationtype_as() {
		return Base.getAll_as(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, Interpolationvalue.class);
	}
 
    /**
     * Adds a value to property Scaletransformationtype as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addScaletransformationtype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}
	
    /**
     * Adds a value to property Scaletransformationtype as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addScaletransformationtype( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
    /**
     * Adds a value to property Scaletransformationtype from an instance of Interpolationvalue 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addScaletransformationtype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Interpolationvalue value) {
		Base.add(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}
	
    /**
     * Adds a value to property Scaletransformationtype from an instance of Interpolationvalue 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addScaletransformationtype(Interpolationvalue value) {
		Base.add(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
  

    /**
     * Sets a value of property Scaletransformationtype from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setScaletransformationtype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}
	
    /**
     * Sets a value of property Scaletransformationtype from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setScaletransformationtype( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
    /**
     * Sets a value of property Scaletransformationtype from an instance of Interpolationvalue 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setScaletransformationtype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Interpolationvalue value) {
		Base.set(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}
	
    /**
     * Sets a value of property Scaletransformationtype from an instance of Interpolationvalue 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setScaletransformationtype(Interpolationvalue value) {
		Base.set(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
  


    /**
     * Removes a value of property Scaletransformationtype as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeScaletransformationtype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}
	
    /**
     * Removes a value of property Scaletransformationtype as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeScaletransformationtype( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
    /**
     * Removes a value of property Scaletransformationtype given as an instance of Interpolationvalue 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeScaletransformationtype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Interpolationvalue value) {
		Base.remove(model, instanceResource, SCALETRANSFORMATIONTYPE, value);
	}
	
    /**
     * Removes a value of property Scaletransformationtype given as an instance of Interpolationvalue 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeScaletransformationtype(Interpolationvalue value) {
		Base.remove(this.model, this.getResource(), SCALETRANSFORMATIONTYPE, value);
	}
  
    /**
     * Removes all values of property Scaletransformationtype     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllScaletransformationtype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCALETRANSFORMATIONTYPE);
	}
	
    /**
     * Removes all values of property Scaletransformationtype	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllScaletransformationtype() {
		Base.removeAll(this.model, this.getResource(), SCALETRANSFORMATIONTYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4dbdd51d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSourcefilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEFILTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4dbdd51d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSourcefilter() {
		return Base.has(this.model, this.getResource(), SOURCEFILTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4dbdd51d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSourcefilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEFILTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4dbdd51d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSourcefilter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEFILTER);
	}

     /**
     * Get all values of property Sourcefilter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcefilter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEFILTER);
	}
	
    /**
     * Get all values of property Sourcefilter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcefilter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEFILTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sourcefilter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcefilter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEFILTER);
	}

    /**
     * Get all values of property Sourcefilter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcefilter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEFILTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sourcefilter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_0> getAllSourcefilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEFILTER, A_0.class);
	}
	
    /**
     * Get all values of property Sourcefilter as a ReactorResult of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_0> getAllSourcefilter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEFILTER, A_0.class);
	}

    /**
     * Get all values of property Sourcefilter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_0> getAllSourcefilter() {
		return Base.getAll(this.model, this.getResource(), SOURCEFILTER, A_0.class);
	}

    /**
     * Get all values of property Sourcefilter as a ReactorResult of A_0 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_0> getAllSourcefilter_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEFILTER, A_0.class);
	}
 
    /**
     * Adds a value to property Sourcefilter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSourcefilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCEFILTER, value);
	}
	
    /**
     * Adds a value to property Sourcefilter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSourcefilter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCEFILTER, value);
	}
    /**
     * Adds a value to property Sourcefilter from an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSourcefilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.add(model, instanceResource, SOURCEFILTER, value);
	}
	
    /**
     * Adds a value to property Sourcefilter from an instance of A_0 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSourcefilter(A_0 value) {
		Base.add(this.model, this.getResource(), SOURCEFILTER, value);
	}
  

    /**
     * Sets a value of property Sourcefilter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSourcefilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCEFILTER, value);
	}
	
    /**
     * Sets a value of property Sourcefilter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSourcefilter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCEFILTER, value);
	}
    /**
     * Sets a value of property Sourcefilter from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSourcefilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.set(model, instanceResource, SOURCEFILTER, value);
	}
	
    /**
     * Sets a value of property Sourcefilter from an instance of A_0 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSourcefilter(A_0 value) {
		Base.set(this.model, this.getResource(), SOURCEFILTER, value);
	}
  


    /**
     * Removes a value of property Sourcefilter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSourcefilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCEFILTER, value);
	}
	
    /**
     * Removes a value of property Sourcefilter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSourcefilter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCEFILTER, value);
	}
    /**
     * Removes a value of property Sourcefilter given as an instance of A_0 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSourcefilter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_0 value) {
		Base.remove(model, instanceResource, SOURCEFILTER, value);
	}
	
    /**
     * Removes a value of property Sourcefilter given as an instance of A_0 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSourcefilter(A_0 value) {
		Base.remove(this.model, this.getResource(), SOURCEFILTER, value);
	}
  
    /**
     * Removes all values of property Sourcefilter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSourcefilter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEFILTER);
	}
	
    /**
     * Removes all values of property Sourcefilter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSourcefilter() {
		Base.removeAll(this.model, this.getResource(), SOURCEFILTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2591a87d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSourceinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEINTERVAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2591a87d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSourceinterval() {
		return Base.has(this.model, this.getResource(), SOURCEINTERVAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2591a87d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSourceinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEINTERVAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2591a87d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSourceinterval( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEINTERVAL);
	}

     /**
     * Get all values of property Sourceinterval as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourceinterval_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEINTERVAL);
	}
	
    /**
     * Get all values of property Sourceinterval as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourceinterval_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEINTERVAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sourceinterval as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourceinterval_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEINTERVAL);
	}

    /**
     * Get all values of property Sourceinterval as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourceinterval_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEINTERVAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sourceinterval     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Sourcevalueinterval> getAllSourceinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEINTERVAL, Sourcevalueinterval.class);
	}
	
    /**
     * Get all values of property Sourceinterval as a ReactorResult of Sourcevalueinterval 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Sourcevalueinterval> getAllSourceinterval_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEINTERVAL, Sourcevalueinterval.class);
	}

    /**
     * Get all values of property Sourceinterval     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Sourcevalueinterval> getAllSourceinterval() {
		return Base.getAll(this.model, this.getResource(), SOURCEINTERVAL, Sourcevalueinterval.class);
	}

    /**
     * Get all values of property Sourceinterval as a ReactorResult of Sourcevalueinterval 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Sourcevalueinterval> getAllSourceinterval_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEINTERVAL, Sourcevalueinterval.class);
	}
 
    /**
     * Adds a value to property Sourceinterval as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSourceinterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCEINTERVAL, value);
	}
	
    /**
     * Adds a value to property Sourceinterval as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSourceinterval( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
    /**
     * Adds a value to property Sourceinterval from an instance of Sourcevalueinterval 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSourceinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Sourcevalueinterval value) {
		Base.add(model, instanceResource, SOURCEINTERVAL, value);
	}
	
    /**
     * Adds a value to property Sourceinterval from an instance of Sourcevalueinterval 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSourceinterval(Sourcevalueinterval value) {
		Base.add(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
  

    /**
     * Sets a value of property Sourceinterval from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSourceinterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCEINTERVAL, value);
	}
	
    /**
     * Sets a value of property Sourceinterval from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSourceinterval( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
    /**
     * Sets a value of property Sourceinterval from an instance of Sourcevalueinterval 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSourceinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Sourcevalueinterval value) {
		Base.set(model, instanceResource, SOURCEINTERVAL, value);
	}
	
    /**
     * Sets a value of property Sourceinterval from an instance of Sourcevalueinterval 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSourceinterval(Sourcevalueinterval value) {
		Base.set(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
  


    /**
     * Removes a value of property Sourceinterval as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSourceinterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCEINTERVAL, value);
	}
	
    /**
     * Removes a value of property Sourceinterval as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSourceinterval( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
    /**
     * Removes a value of property Sourceinterval given as an instance of Sourcevalueinterval 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSourceinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Sourcevalueinterval value) {
		Base.remove(model, instanceResource, SOURCEINTERVAL, value);
	}
	
    /**
     * Removes a value of property Sourceinterval given as an instance of Sourcevalueinterval 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSourceinterval(Sourcevalueinterval value) {
		Base.remove(this.model, this.getResource(), SOURCEINTERVAL, value);
	}
  
    /**
     * Removes all values of property Sourceinterval     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSourceinterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEINTERVAL);
	}
	
    /**
     * Removes all values of property Sourceinterval	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSourceinterval() {
		Base.removeAll(this.model, this.getResource(), SOURCEINTERVAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f7bdccd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSourcevalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUEORDEREDSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f7bdccd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSourcevalueorderedset() {
		return Base.has(this.model, this.getResource(), SOURCEVALUEORDEREDSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f7bdccd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSourcevalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUEORDEREDSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f7bdccd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSourcevalueorderedset( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUEORDEREDSET);
	}

     /**
     * Get all values of property Sourcevalueorderedset as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueorderedset_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUEORDEREDSET);
	}
	
    /**
     * Get all values of property Sourcevalueorderedset as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueorderedset_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUEORDEREDSET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sourcevalueorderedset as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueorderedset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUEORDEREDSET);
	}

    /**
     * Get all values of property Sourcevalueorderedset as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueorderedset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUEORDEREDSET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sourcevalueorderedset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourcevalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}
	
    /**
     * Get all values of property Sourcevalueorderedset as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourcevalueorderedset_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}

    /**
     * Get all values of property Sourcevalueorderedset     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourcevalueorderedset() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}

    /**
     * Get all values of property Sourcevalueorderedset as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.List 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.List> getAllSourcevalueorderedset_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUEORDEREDSET, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}
 
    /**
     * Adds a value to property Sourcevalueorderedset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSourcevalueorderedset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}
	
    /**
     * Adds a value to property Sourcevalueorderedset as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSourcevalueorderedset( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
    /**
     * Adds a value to property Sourcevalueorderedset from an instance of org.ontoware.rdfreactor.schema.rdfs.List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSourcevalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.add(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}
	
    /**
     * Adds a value to property Sourcevalueorderedset from an instance of org.ontoware.rdfreactor.schema.rdfs.List 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSourcevalueorderedset(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.add(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
  

    /**
     * Sets a value of property Sourcevalueorderedset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSourcevalueorderedset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}
	
    /**
     * Sets a value of property Sourcevalueorderedset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSourcevalueorderedset( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
    /**
     * Sets a value of property Sourcevalueorderedset from an instance of org.ontoware.rdfreactor.schema.rdfs.List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSourcevalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}
	
    /**
     * Sets a value of property Sourcevalueorderedset from an instance of org.ontoware.rdfreactor.schema.rdfs.List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSourcevalueorderedset(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
  


    /**
     * Removes a value of property Sourcevalueorderedset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSourcevalueorderedset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}
	
    /**
     * Removes a value of property Sourcevalueorderedset as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSourcevalueorderedset( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
    /**
     * Removes a value of property Sourcevalueorderedset given as an instance of org.ontoware.rdfreactor.schema.rdfs.List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSourcevalueorderedset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(model, instanceResource, SOURCEVALUEORDEREDSET, value);
	}
	
    /**
     * Removes a value of property Sourcevalueorderedset given as an instance of org.ontoware.rdfreactor.schema.rdfs.List 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSourcevalueorderedset(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUEORDEREDSET, value);
	}
  
    /**
     * Removes all values of property Sourcevalueorderedset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSourcevalueorderedset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUEORDEREDSET);
	}
	
    /**
     * Removes all values of property Sourcevalueorderedset	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSourcevalueorderedset() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUEORDEREDSET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ebce7c9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSourcevalueslabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCEVALUESLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ebce7c9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSourcevalueslabel() {
		return Base.has(this.model, this.getResource(), SOURCEVALUESLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ebce7c9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSourcevalueslabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCEVALUESLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ebce7c9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSourcevalueslabel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCEVALUESLABEL);
	}

     /**
     * Get all values of property Sourcevalueslabel as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueslabel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCEVALUESLABEL);
	}
	
    /**
     * Get all values of property Sourcevalueslabel as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueslabel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESLABEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sourcevalueslabel as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueslabel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCEVALUESLABEL);
	}

    /**
     * Get all values of property Sourcevalueslabel as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSourcevalueslabel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESLABEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sourcevalueslabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSourcevalueslabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCEVALUESLABEL, java.lang.String.class);
	}
	
    /**
     * Get all values of property Sourcevalueslabel as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSourcevalueslabel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCEVALUESLABEL, java.lang.String.class);
	}

    /**
     * Get all values of property Sourcevalueslabel     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSourcevalueslabel() {
		return Base.getAll(this.model, this.getResource(), SOURCEVALUESLABEL, java.lang.String.class);
	}

    /**
     * Get all values of property Sourcevalueslabel as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSourcevalueslabel_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCEVALUESLABEL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Sourcevalueslabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSourcevalueslabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCEVALUESLABEL, value);
	}
	
    /**
     * Adds a value to property Sourcevalueslabel as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSourcevalueslabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
    /**
     * Adds a value to property Sourcevalueslabel from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSourcevalueslabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SOURCEVALUESLABEL, value);
	}
	
    /**
     * Adds a value to property Sourcevalueslabel from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSourcevalueslabel(java.lang.String value) {
		Base.add(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
  

    /**
     * Sets a value of property Sourcevalueslabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSourcevalueslabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCEVALUESLABEL, value);
	}
	
    /**
     * Sets a value of property Sourcevalueslabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSourcevalueslabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
    /**
     * Sets a value of property Sourcevalueslabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSourcevalueslabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SOURCEVALUESLABEL, value);
	}
	
    /**
     * Sets a value of property Sourcevalueslabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSourcevalueslabel(java.lang.String value) {
		Base.set(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
  


    /**
     * Removes a value of property Sourcevalueslabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSourcevalueslabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCEVALUESLABEL, value);
	}
	
    /**
     * Removes a value of property Sourcevalueslabel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSourcevalueslabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
    /**
     * Removes a value of property Sourcevalueslabel given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSourcevalueslabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SOURCEVALUESLABEL, value);
	}
	
    /**
     * Removes a value of property Sourcevalueslabel given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSourcevalueslabel(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SOURCEVALUESLABEL, value);
	}
  
    /**
     * Removes all values of property Sourcevalueslabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSourcevalueslabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCEVALUESLABEL);
	}
	
    /**
     * Removes all values of property Sourcevalueslabel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSourcevalueslabel() {
		Base.removeAll(this.model, this.getResource(), SOURCEVALUESLABEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4de58e9e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetvalueinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUEINTERVAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4de58e9e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetvalueinterval() {
		return Base.has(this.model, this.getResource(), TARGETVALUEINTERVAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4de58e9e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetvalueinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUEINTERVAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4de58e9e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetvalueinterval( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUEINTERVAL);
	}

     /**
     * Get all values of property Targetvalueinterval as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueinterval_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUEINTERVAL);
	}
	
    /**
     * Get all values of property Targetvalueinterval as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueinterval_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUEINTERVAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Targetvalueinterval as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueinterval_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUEINTERVAL);
	}

    /**
     * Get all values of property Targetvalueinterval as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalueinterval_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUEINTERVAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Targetvalueinterval     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Graphicattributeinterval> getAllTargetvalueinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUEINTERVAL, Graphicattributeinterval.class);
	}
	
    /**
     * Get all values of property Targetvalueinterval as a ReactorResult of Graphicattributeinterval 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Graphicattributeinterval> getAllTargetvalueinterval_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUEINTERVAL, Graphicattributeinterval.class);
	}

    /**
     * Get all values of property Targetvalueinterval     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Graphicattributeinterval> getAllTargetvalueinterval() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUEINTERVAL, Graphicattributeinterval.class);
	}

    /**
     * Get all values of property Targetvalueinterval as a ReactorResult of Graphicattributeinterval 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Graphicattributeinterval> getAllTargetvalueinterval_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUEINTERVAL, Graphicattributeinterval.class);
	}
 
    /**
     * Adds a value to property Targetvalueinterval as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTargetvalueinterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TARGETVALUEINTERVAL, value);
	}
	
    /**
     * Adds a value to property Targetvalueinterval as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTargetvalueinterval( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
    /**
     * Adds a value to property Targetvalueinterval from an instance of Graphicattributeinterval 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTargetvalueinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Graphicattributeinterval value) {
		Base.add(model, instanceResource, TARGETVALUEINTERVAL, value);
	}
	
    /**
     * Adds a value to property Targetvalueinterval from an instance of Graphicattributeinterval 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTargetvalueinterval(Graphicattributeinterval value) {
		Base.add(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
  

    /**
     * Sets a value of property Targetvalueinterval from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetvalueinterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETVALUEINTERVAL, value);
	}
	
    /**
     * Sets a value of property Targetvalueinterval from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetvalueinterval( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
    /**
     * Sets a value of property Targetvalueinterval from an instance of Graphicattributeinterval 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetvalueinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Graphicattributeinterval value) {
		Base.set(model, instanceResource, TARGETVALUEINTERVAL, value);
	}
	
    /**
     * Sets a value of property Targetvalueinterval from an instance of Graphicattributeinterval 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetvalueinterval(Graphicattributeinterval value) {
		Base.set(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
  


    /**
     * Removes a value of property Targetvalueinterval as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetvalueinterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETVALUEINTERVAL, value);
	}
	
    /**
     * Removes a value of property Targetvalueinterval as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetvalueinterval( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
    /**
     * Removes a value of property Targetvalueinterval given as an instance of Graphicattributeinterval 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetvalueinterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Graphicattributeinterval value) {
		Base.remove(model, instanceResource, TARGETVALUEINTERVAL, value);
	}
	
    /**
     * Removes a value of property Targetvalueinterval given as an instance of Graphicattributeinterval 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetvalueinterval(Graphicattributeinterval value) {
		Base.remove(this.model, this.getResource(), TARGETVALUEINTERVAL, value);
	}
  
    /**
     * Removes all values of property Targetvalueinterval     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetvalueinterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUEINTERVAL);
	}
	
    /**
     * Removes all values of property Targetvalueinterval	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetvalueinterval() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUEINTERVAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c384a7c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetvalues_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETVALUES_ABSTRACT_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c384a7c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetvalues_abstract_() {
		return Base.has(this.model, this.getResource(), TARGETVALUES_ABSTRACT_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c384a7c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetvalues_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETVALUES_ABSTRACT_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c384a7c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetvalues_abstract_( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETVALUES_ABSTRACT_);
	}

     /**
     * Get all values of property Targetvalues_abstract_ as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalues_abstract__asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGETVALUES_ABSTRACT_);
	}
	
    /**
     * Get all values of property Targetvalues_abstract_ as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalues_abstract__asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUES_ABSTRACT_, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Targetvalues_abstract_ as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTargetvalues_abstract__asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGETVALUES_ABSTRACT_);
	}

    /**
     * Get all values of property Targetvalues_abstract_ as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTargetvalues_abstract__asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Targetvalues_abstract_     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<VisualValueList> getAllTargetvalues_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGETVALUES_ABSTRACT_, VisualValueList.class);
	}
	
    /**
     * Get all values of property Targetvalues_abstract_ as a ReactorResult of VisualValueList 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<VisualValueList> getAllTargetvalues_abstract__as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGETVALUES_ABSTRACT_, VisualValueList.class);
	}

    /**
     * Get all values of property Targetvalues_abstract_     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<VisualValueList> getAllTargetvalues_abstract_() {
		return Base.getAll(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, VisualValueList.class);
	}

    /**
     * Get all values of property Targetvalues_abstract_ as a ReactorResult of VisualValueList 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<VisualValueList> getAllTargetvalues_abstract__as() {
		return Base.getAll_as(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, VisualValueList.class);
	}
 
    /**
     * Adds a value to property Targetvalues_abstract_ as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTargetvalues_abstract_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}
	
    /**
     * Adds a value to property Targetvalues_abstract_ as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTargetvalues_abstract_( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
    /**
     * Adds a value to property Targetvalues_abstract_ from an instance of VisualValueList 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTargetvalues_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, VisualValueList value) {
		Base.add(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}
	
    /**
     * Adds a value to property Targetvalues_abstract_ from an instance of VisualValueList 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTargetvalues_abstract_(VisualValueList value) {
		Base.add(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
  

    /**
     * Sets a value of property Targetvalues_abstract_ from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetvalues_abstract_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}
	
    /**
     * Sets a value of property Targetvalues_abstract_ from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetvalues_abstract_( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
    /**
     * Sets a value of property Targetvalues_abstract_ from an instance of VisualValueList 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetvalues_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, VisualValueList value) {
		Base.set(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}
	
    /**
     * Sets a value of property Targetvalues_abstract_ from an instance of VisualValueList 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetvalues_abstract_(VisualValueList value) {
		Base.set(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
  


    /**
     * Removes a value of property Targetvalues_abstract_ as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetvalues_abstract_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}
	
    /**
     * Removes a value of property Targetvalues_abstract_ as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetvalues_abstract_( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
    /**
     * Removes a value of property Targetvalues_abstract_ given as an instance of VisualValueList 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetvalues_abstract_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, VisualValueList value) {
		Base.remove(model, instanceResource, TARGETVALUES_ABSTRACT_, value);
	}
	
    /**
     * Removes a value of property Targetvalues_abstract_ given as an instance of VisualValueList 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetvalues_abstract_(VisualValueList value) {
		Base.remove(this.model, this.getResource(), TARGETVALUES_ABSTRACT_, value);
	}
  
    /**
     * Removes all values of property Targetvalues_abstract_     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetvalues_abstract_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETVALUES_ABSTRACT_);
	}
	
    /**
     * Removes all values of property Targetvalues_abstract_	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetvalues_abstract_() {
		Base.removeAll(this.model, this.getResource(), TARGETVALUES_ABSTRACT_);
	}
 }